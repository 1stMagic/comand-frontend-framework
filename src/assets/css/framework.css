@charset "utf-8";
/*
framework.css version 3.3.3 last update: 2023/01/23
IT IS NOT RECOMMENDED TO EDIT THIS FILE (TO AVOID TROUBLESHOOTING AFTER UPDATING) - DO CHANGES/OVERWRITES IN template.css or a custom css-file ONLY
*/

/* begin table of contents ------------------------------------------------------------------------------------------ */
/*
- VARIABLES ------------------------

- MAIN STYLES ------------------------
B ------------------------
  - basic selectors and classes
  - boxes
  - buttons

C ------------------------
  - clearfix

D ------------------------
  - disabled

F ------------------------
  - flex-containers
  - forms: basic elements
  - forms: progressbar
  - forms: range-slider

G ------------------------
  - grid-containers

H ------------------------
  - headlines
  - hyperlinks & anchors

I ------------------------
  - icons

L ------------------------
  - lists

N ------------------------
  - navigation

S ------------------------
  - system messages

T ------------------------
  - tables
  - transforms

- MEDIA QUERIES ------------------------
- styles for medium screens
- styles for small screens
- styles for print only
*/
/* end table of contents ------------------------------------------------------------------------------------------ */

/* ---------------------------------------------- BEGIN VARIABLES -------------------------------------------------- */
html {
    /* max-width (used to limit website-content) */
    --max-width: 144rem;

    /* backgrounds */
    --default-background-color-hue: 0; /* default-background-color-hue */
    --default-background-color-saturation: 0%; /* default-background-color-saturation */
    --default-background-color-lightness: 97%; /* default-background-color-lightness */
    --default-background-color-hsl-values: var(--default-background-color-hue), var(--default-background-color-saturation), var(--default-background-color-lightness); /* default-background-color-hsl-values */
    --default-background-color: hsl(var(--default-background-color-hsl-values)); /* default-background-color-hue */
    --default-background-color-reduced-opacity: hsla(var(--default-background-color-hsl-values), var(--reduced-opacity)); /* default-background-color with reduced opacity */

    --disabled-background-color-lightness: 78%; /* disabled-background-color-lightness */
    --disabled-background-color-hsl-values: var(--default-background-color-hue), var(--default-background-color-saturation), var(--disabled-background-color-lightness); /* disabled-background-color-hsl-values */
    --disabled-background-color: hsl(var(--disabled-background-color-hsl-values)); /* disabled-background-color-hue */
    --disabled-background-color-reduced-opacity: hsla(var(--disabled-background-color-hsl-values), var(--reduced-opacity)); /* disabled-background-color with reduced opacity */

    /* borders */
    --border-radius: 0; /* border-radius */
    --full-circle: 50%; /* border-radius for full circles */
    --border-color: var(--color-scheme-text-color); /* border-color */
    --border-width: .1rem; /* border-width */
    --border-style: solid; /* border-style */
    --default-border: var(--border-width) var(--border-style) var(--border-color); /* default-border */
    --default-border-reduced-opacity: var(--border-width) var(--border-style) var(--secondary-color-reduced-opacity); /* default-border with reduced opacity */
    --error-border: var(--border-width) var(--border-style) var(--error-color); /* error-border */
    --success-border: var(--border-width) var(--border-style) var(--success-color); /* success-border */
    --primary-border: var(--border-width) var(--border-style) var(--primary-color); /* border width primary-color (i.e. for :focus-status) */
    --secondary-border: var(--border-width) var(--border-style) var(--secondary-color); /* border width secondary-color */
    --tertiary-border: var(--border-width) var(--border-style) var(--tertiary-color); /* border width tertiary-color */
    --disabled-border: var(--border-width) var(--border-style) var(--disabled-color); /* border width disabled-color */

    /* colors */
    /* white */
    --pure-white-hue: 0; /* pure-white-hue */
    --pure-white-saturation: 0%; /* pure-white-saturation */
    --pure-white-lightness: 100%; /* pure-white-lightness */
    --pure-white-hsl-values: var(--pure-white-hue), var(--pure-white-saturation), var(--pure-white-lightness); /* pure-white-hsl */
    --pure-white: hsl(var(--pure-white-hsl-values)); /* pure-white-color */
    --pure-white-reduced-opacity: hsla(var(--pure-white-hsl-values), var(--reduced-opacity)); /* pure-white-color with reduced opacity */

    /* light-gray */
    --light-gray-lightness: 90%; /* light-gray-color-hue */
    --light-gray-hsl-values: var(--pure-white-hue), var(--pure-white-saturation), var(--light-gray-lightness); /* light-gray-hsl */
    --light-gray: hsl(var(--light-gray-hsl-values)); /* light-gray-color */
    --light-gray-reduced-opacity: hsla(var(--light-gray-hsl-values), var(--reduced-opacity)); /* light-gray with reduced opacity */

    /* medium-gray */
    --medium-gray-lightness: 50%; /* medium-gray-color-hue */
    --medium-gray-hsl-values: var(--pure-white-hue), var(--pure-white-saturation), var(--medium-gray-lightness); /* medium-gray-hsl */
    --medium-gray: hsl(var(--medium-gray-hsl-values)); /* medium-gray-color */
    --medium-gray-reduced-opacity: hsla(var(--medium-gray-hsl-values), var(--reduced-opacity)); /* medium-gray-color with reduced opacity */

    /* dark-gray */
    --dark-gray-lightness: 10%; /* dark-gray-color-hue */
    --dark-gray-hsl-values: var(--pure-white-hue), var(--pure-white-saturation), var(--dark-gray-lightness); /* dark-gray-hsl */
    --dark-gray: hsl(var(--dark-gray-hsl-values)); /* dark-gray-color */
    --dark-gray-reduced-opacity: hsla(var(--dark-gray-hsl-values), var(--reduced-opacity)); /* dark-gray-color with reduced opacity */

    /* black */
    --pure-black-lightness: 0%; /* pure-black-color-hue */
    --pure-black-hsl-values: var(--pure-white-hue), var(--pure-white-saturation), var(--pure-black-lightness); /* pure-black-hsl */
    --pure-black: hsl(var(--pure-black-hsl-values)); /* pure-black-color */
    --pure-black-reduced-opacity: hsla(var(--pure-black-hsl-values), var(--reduced-opacity)); /* pure-black-color with reduced opacity */

    /* system-colors (for errors, warnings, successes, infos) */
    --error-color-hue: 8; /* error-color-hue */
    --error-color-saturation: 100%; /* error-color-saturation */
    --error-color-lightness: 36%; /* error-color-lightness */
    --error-color-hsl-values: var(--error-color-hue), var(--error-color-saturation), var(--error-color-lightness); /* error-color-hsl-value */
    --error-color: hsl(var(--error-color-hsl-values)); /* error-color */

    --warning-color-hue: 46; /* warning-color-hue */
    --warning-color-saturation: 100%; /* warning-color-saturation */
    --warning-color-lightness: 70%; /* warning-color-lightness */
    --warning-color-hsl-values: var(--warning-color-hue), var(--warning-color-saturation), var(--warning-color-lightness); /* warning-color-hsl-values: */
    --warning-color: hsl(var(--warning-color-hsl-values)); /* warning-color */

    --success-color-hue: 116; /* success-color-hue */
    --success-color-saturation: 100%; /* success-color-saturation */
    --success-color-lightness: 23%; /* success-color-lightness */
    --success-color-hsl-values: var(--success-color-hue), var(--success-color-saturation), var(--success-color-lightness); /* success-color-hsl-values: */
    --success-color: hsl(var(--success-color-hsl-values)); /* success-color */

    --info-color-hue: 217; /* info-color-hue */
    --info-color-saturation: 100%; /* info-color-saturation */
    --info-color-lightness: 63%; /* info-color-lightness */
    --info-color-hsl-values: var(--info-color-hue), var(--info-color-saturation), var(--info-color-lightness); /* info-color-hsl-values: */
    --info-color: hsl(var(--info-color-hsl-values)); /* info-color */

    --system-message-text-color: var(--pure-white); /* text-color for all system-messages */

    /* primary-color (i.e. for highlights, primary-buttons) */
    --primary-color-hue: 201; /* primary-color-hue */
    --primary-color-saturation: 93%; /* primary-color-saturation */
    --primary-color-lightness: 26%; /* primary-color-lightness */
    --primary-color-hsl-values: var(--primary-color-hue), var(--primary-color-saturation), var(--primary-color-lightness); /* primary-color-hsl-values */
    --primary-color: hsl(var(--primary-color-hsl-values)); /* primary-color */
    --primary-color-reduced-opacity: hsla(var(--primary-color-hsl-values), var(--reduced-opacity)); /* primary-color with reduced opacity */

    /* secondary-color (i.e. for secondary-buttons) */
    --secondary-color-hue: 0; /* secondary-color-hue */
    --secondary-color-saturation: 0%; /* secondary-color-saturation */
    --secondary-color-lightness: 30%; /* secondary-color-lightness */
    --secondary-color-hsl-values: var(--secondary-color-hue), var(--secondary-color-saturation), var(--secondary-color-lightness); /* secondary-color-hsl-values */
    --secondary-color: hsl(var(--secondary-color-hsl-values)); /* secondary-color */
    --secondary-color-reduced-opacity: hsla(var(--secondary-color-hsl-values), var(--reduced-opacity)); /* secondary-color with reduced opacity */

    /* tertiary-color (i.e. for tertiary-buttons) */
    --tertiary-color-hue: 201; /* tertiary-color-hue */
    --tertiary-color-saturation: 93%; /* tertiary-color-saturation */
    --tertiary-color-lightness: 70%; /* tertiary-color-lightness */
    --tertiary-color-hsl-values: var(--tertiary-color-hue), var(--tertiary-color-saturation), var(--tertiary-color-lightness); /* tertiary-color-hsl-values */
    --tertiary-color: hsl(var(--tertiary-color-hsl-values)); /* tertiary-color */
    --tertiary-color-reduced-opacity: hsla(var(--tertiary-color-hsl-values), var(--reduced-opacity)); /* tertiary-color with reduced opacity */

    /* text- and hyperlink-colors */
    --text-color-hue: 0; /* text-color-hue */
    --text-color-saturation: 0%; /* text-color-saturation */
    --text-color-lightness: 15%; /* text-color-lightness */
    --text-color-hsl-values: var(--text-color-hue), var(--text-color-saturation), var(--text-color-lightness); /* text-color-hsl-values */
    --text-color: hsl(var(--text-color-hsl-values)); /* text-color */

    --hyperlink-color: var(--primary-color); /* hyperlink-color */
    --hyperlink-color-lightness: 50%; /* hyperlink-color-lightness (used for highlighted hyperlinks) */
    --hyperlink-color-highlighted: hsl(var(--primary-color-hue), var(--primary-color-saturation), var(--hyperlink-color-lightness)); /* hyperlink-color highlighted (:hover, :active, :focus) hyperlinks */

    --disabled-color-hue: 0; /* disabled-color-hue */
    --disabled-color-saturation: 0%; /* disabled-color-saturation */
    --disabled-color-lightness: 30%; /* disabled-color-lightness */
    --disabled-color-hsl-values: var(--disabled-color-hue), var(--disabled-color-saturation), var(--disabled-color-lightness); /* disabled-color-hsl-values */
    --disabled-color: hsl(var(--disabled-color-hsl-values)); /* disabled-color */
    --disabled-color-reduced-opacity: hsla(var(--disabled-color-hsl-values), var(--reduced-opacity)); /* disabled-color with reduced opacity */

    /* fonts and typography */
    --font-family: arial, sans-serif; /* font-family */
    --font-size: 1.4rem; /* font-size for default-text */
    --font-size-small: 1rem; /* font-size for small text */
    --icon-size: 1.4rem; /* font-size for icons */
    --icon-size-small: 1rem; /* font-size for small icons */
    --line-height: 1.4; /* line-height - may not be set as percentage to work properly in calc() */
    --line-of-text-height: calc(var(--font-size) * var(--line-height)); /* height of one line of (default) text */
    --headline-font-weight: bold; /* font-weight for headlines */
    --hyperlink-text-decoration: underline; /* text-decoration for hyperlinks */
    --hyperlink-text-decoration-highlighted: none; /* text-decoration for highlighted (:hover, :active, :focus) hyperlinks */

    /* form-elements */
    --input-height: 4rem; /* fixed height to render inputs and select same height across different browsers */

    /* paddings, margins and gaps */
    --default-padding: 1rem; /* default paddings */
    --default-margin: 1rem; /* default margins */
    --default-gap: 2rem; /* default gap for flex- and grid-containers */

    /* grid */
    --grid-columns: 12; /* grid-columns */
    --grid-layout-columns: 4; /* layout/optical columns */
    --grid-small-span: 3; /* default column span smaller part */
    --grid-large-span: 9; /* default column span larger part */
    --grid-gap: var(--default-gap); /* grid-gap for grid-items */

    /* opacity */
    --reduced-opacity: .75; /* reduced opacity (should be at least 0.75 for accessibility) */

    /* shadows */
    --box-shadow-color: var(--text-color); /* box-shadow-color */
    --box-shadow: .2rem .2rem .2rem var(--box-shadow-color); /* box-shadow */
    --text-shadow-color: var(--text-color); /* text-shadow-color */
    --text-shadow: .1rem .1rem .1rem var(--text-shadow-color); /* text-shadow-color */

    /* transitions */
    --default-transition: all .5s; /* default transition */

    /* colors for color-schemes (light-/dark-mode) */
    --light-mode-text-color: var(--text-color);
    --light-mode-text-color-buttons: var(--pure-white);
    --dark-mode-text-color: hsl(0, 0%, 80%);
    --dark-mode-text-color-buttons: var(--dark-mode-background-color);
    --light-mode-background-color: var(--pure-white);
    --dark-mode-background-color: var(--dark-gray);

    /* assign default colors for light-mode */
    --color-scheme-text-color: var(--light-mode-text-color);
    --color-scheme-text-color-buttons: var(--light-mode-text-color-buttons);
    --color-scheme-background-color: var(--light-mode-background-color);
    --color-scheme-text-color-inverted: var(--dark-mode-text-color);
    --color-scheme-background-inverted: var(--dark-mode-background-color);
}
/* ---------------------------------------------- END VARIABLES -------------------------------------------------- */

/* ---------------------------------------------- BEGIN MAIN STYLES -------------------------------------------------- */
/* begin basic selectors and classes ------------------------------------------------------------------------------------------ */
html {
    font-size: 62.5%; /* default size is 16px, 62.5% of that is 10px = 1rem */
    scroll-behavior: smooth; /* let pages scroll smoothly to anchors */
}

html, textarea {
    font-family: var(--font-family);
}

html, body {
    height: auto; /* maximises visible area. do not set to "min-height" (important to fix footer at bottom!) */
    background: var(--color-scheme-background-color); /* necessary for accessibility to set default value */
}

body {
    min-height: 100%;
    color: var(--color-scheme-text-color);
    word-wrap: break-word; /* breaks word at the end of the line */
    font-size: var(--font-size); /* sets the default font-size for every element */
    line-height: var(--line-height); /* improves reading on the screen. default is 120% */
}

body.no-transitions *, .no-transitions {
    transition: none !important;
}

.no-padding {
    padding: 0 !important;
}

.default-padding {
    padding: var(--default-padding);
}

.default-padding > *:last-child {
    margin-bottom: 0;
}

.default-margin {
    margin: var(--default-margin);
}

.hide-for-small-up, .hide-for-medium-up {
    display: none !important;
}

dialog {
    border: var(--default-border);
}

time {
    display: inline;
}

object, svg, img, video, canvas, .responsive-wrapper {
    max-width: 100%;
    height: auto;
}

.responsive-wrapper {
    aspect-ratio: auto;
    overflow: hidden;
}

.ratio-16-9 {
    aspect-ratio: 16/9;
}

.ratio-4-3 {
    aspect-ratio: 4/3;
}

.ratio-1-1 {
    aspect-ratio: 1/1;
}

.responsive-wrapper iframe {
    display: block;
    width: 100%;
    height: 100%;
}

.center-item-wrapper {
    display: grid;
    place-items: center;
}

.center-absolute {
    --position: 50%;
    position: absolute;
    display: block;
    top: var(--position);
    left: var(--position);
    translate: calc(var(--position) * -1);
}

.full-width, .full-height {
    display: block; /* sets element to a block-element */
    float: none; /* element should not float */
}

.full-width {
    width: 100% !important; /* overwrite all set widths */
    max-width: none !important; /* overwrite all set max-widths */
}

.full-height {
    height: 100% !important; /* overwrite all set heights */
    max-height: none !important; /* overwrite all set max-height */
}

.auto-width {
    width: auto !important;
}

.auto-height {
    height: auto !important;
}

.sticky {
    position: sticky;
    left: 0;
    right: 0;
    top: 0;
    z-index: 100;
}

.nowrap {
    white-space: nowrap;
}
.text-align-center {
    text-align: center;
}

.text-align-right {
    text-align: right;
}

h1, h2, h3, h4, h5, h6,
p, ul, ol, dl, table, fieldset, address {
    margin-bottom: var(--default-margin); /* margin-bottom for most elements */
}

strong {
    font-weight: bold;
}

em, cite, .italic {
    font-style: italic;
}

small, small > a, small > span, .small {
    font-size: 1.2rem;
}

blockquote, q {
    quotes: none;
}

hr {
    border-width: 0;
    border-top-width: var(--border-width);
    margin: calc(var(--default-margin) * 2);
    clear: both;
}

hr + * {
    margin-top: calc(var(--default-margin) * 2);
}

figure {
    margin: 0;
}

a :is(img, figcaption) {
    display: block;
    text-align: center;
    margin: 0 auto;
}

a img {
    border: var(--default-border);
}

a:where(:hover, :active, :focus) img {
    border-color: var(--primary-color);
}

:is(p, li, a, dd, td) :is(code, pre) {
    display: inline;
}

.hidden, .display-none {
    display: none !important
}

.visibility-hidden {
    visibility: hidden !important;
}
/* end basic selectors and classes ------------------------------------------------------------------------------------------ */

/* begin boxes ------------------------------------------------------------------------------------------ */
.box {
    background: var(--default-background-color);
    border: var(--default-border);
    border-radius: var(--border-radius);
    padding: calc(var(--default-padding) * 2);
}

.box > div:first-child {
    margin-top: 0;
}

.box > p:last-child {
    margin-bottom: 0;
}

.box.center-content p:last-child {
    margin: 0;
}

.box.center-content > div {
    border: var(--default-border);
    margin: 0 auto;
    top: 50%;
    translateY: -50%;
    display: table;
    padding: var(--default-padding);
}

.box.center-content:is(.grid-container, .flex-container) {
    place-content: center;
}

.box.center-content.flex-container {
    align-items: center; /* required to center flex items vertical correctly */
}

.box.center-content:is(.grid-container, .flex-container) > div {
    top: auto;
    transform: none;
    flex: none; /* make item as wide as its content */
}

/* begin box effects */
.border-radius {
    border-radius: var(--border-radius); /* border-radius to create round corners for any element with this class  */
}

.box-shadow {
    box-shadow: var(--box-shadow); /* box-shadow (color, left/right, top/bottom, blur) for any element with this class */
}

.border {
    border: var(--default-border); /* border (width, style, color) for any element with this class */
}
/* end box effects */
/* end boxes ------------------------------------------------------------------------------------------ */

/* begin buttons ------------------------------------------------------------------------------------------ */
button, .button, input[type="submit"] {
    background: var(--color-scheme-text-color);
    border: var(--default-border);
    border-color: var(--color-scheme-text-color);
    border-radius: var(--border-radius);
    color: var(--color-scheme-text-color-buttons);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    margin: 0;
    padding: var(--default-padding);
    text-align: center;
    text-decoration: none;
    line-height: 100%;
    min-width: 4rem;
    min-height: 4rem;
}

:is(button, .button) > span,
:is(button, .button) > span[class*="icon-"] {
    color: var(--color-scheme-text-color-buttons);
    align-self: center; /* necessary to keep text and icon centered if button has different alignment */
}

:where(button, .button, input[type="submit"]).primary {
    background: var(--primary-color);
    border-color: var(--primary-color);
}

:where(button, .button, input[type="submit"]).tertiary {
    background: var(--tertiary-color);
    border-color: var(--tertiary-color);
}

:where(button, .button, input[type="submit"]).center {
    display: table;
    float: none;
    margin: 0 auto;
}

:is(button, .button, input[type="submit"]):last-child {
    margin: 0;
}

:is(button, .button, input[type="submit"]):is(:hover, :active, :focus) {
    color: var(--color-scheme-text-color);
    background: var(--color-scheme-background-color);
    cursor: pointer;
    text-shadow: none;
}

:is(button, .button, input[type="submit"]).primary:is(:hover, :active, :focus) {
    color: var(--primary-color);
    border-color: var(--primary-color);
}

:is(button, .button, input[type="submit"]).tertiary:is(:hover, :active, :focus) {
    color: var(--tertiary-color);
    border-color: var(--tertiary-color);
}

:is(button, .button):is(:hover, :active, :focus) > span,
:is(button, .button):is(:hover, :active, :focus) > span[class*="icon-"] {
    color: var(--color-scheme-text-color);
    text-shadow: none;
}

:is(button, .button).primary:is(:hover, :active, :focus) > span,
:is(button, .button).primary:is(:hover, :active, :focus) > span[class*="icon-"] {
    color: var(--primary-color);
}

:is(button, .button).tertiary:is(:hover, :active, :focus) > span,
:is(button, .button).tertiary:is(:hover, :active, :focus) > span[class*="icon-"] {
    color: var(--tertiary-color);
}
/* end buttons ------------------------------------------------------------------------------------------ */

/* begin clearfix ------------------------------------------------------------------------------------------ */
/* clearfix is for clearing the boxes in ie and ff correctly (= the height of the outer container will be displayed correctly) */
.clearfix:after {
    content: ".";
    visibility: hidden;
    display: block;
    clear: both;
    height: 0;
}

.clearfix {
    display: block;
}

.clear, .clear-both {
    visibility: hidden;
    clear: both;
    height: 0;
    line-height: 0;
}
/* end clearfix ------------------------------------------------------------------------------------------ */

/* begin disabled ------------------------------------------------------------------------------------------ */
[readonly],
.disabled,
.disabled :is(span, input, select, textarea, .input),
[disabled],
[disabled] > span,
input[type="submit"]:disabled {
    background: var(--disabled-background-color) !important;
    color: var(--disabled-color) !important;
    border-color: var(--disabled-color) !important;
    text-shadow: inherit;
}

/* set disabled-color in chrome (will be to set darkest-possible value by browser) */
@media screen and (-webkit-min-device-pixel-ratio: 0) {
    select[disabled], select[disabled] > option {
        color: var(--pure-black) !important;
    }
}

/* set disabled-color to default in firefox */
@-moz-document url-prefix() {
    select[disabled], select[disabled] > option {
        color: var(--disabled-color) !important;
    }
}

:where(input[type="checkbox"], input[type="radio"]):disabled + span,
.toggle-switch .switch-label-wrapper input:disabled ~ .label-text {
    color: var(--disabled-color) !important;
}

:where([readonly], .disabled, [disabled]):is(:hover, :active, :focus) {
    cursor: not-allowed !important;
}

:is(label, .label).disabled,
:is(label, .label).disabled span {
    background: none !important;
}

.toggle-switch input:checked:disabled::after,
.toggle-switch .switch-label-wrapper input:checked:disabled ~ .label-text::before {
    background: var(--disabled-color) !important;
    border-color: var(--disabled-color) !important;
}

.toggle-switch.disabled .switch-label-wrapper {
    border-color: var(--disabled-color) !important;
    background: var(--disabled-background-color) !important;
}

.toggle-switch .switch-label-wrapper input:disabled ~ .label-text {
    color: var(--disabled-color) !important;
}

.disabled .replace-input-type,
.toggle-switch.disabled .label-text::before {
    border-color: var(--disabled-color) !important;
}
/* end disabled ------------------------------------------------------------------------------------------ */

/* begin flex-containers ------------------------------------------------------------------------------------------ */
.flex-container, .button-wrapper {
    display: flex;
    flex-wrap: wrap; /* breaks children to new line if they are wider than their parent */
    gap: var(--default-gap);
}

:where(.flex-container, .button-wrapper ) > * {
    float: none !important; /* flex-items should not be floated */
}

.flex-container > *:not(.button) {
    flex: 1; /* item should have same width */
}

.flex-container.stretch > * {
    align-self: stretch; /* stretch items to same height (elements must/should not have a set height) */
}

.flex-container.align-bottom > * {
  align-self: flex-end;
}

.flex-container.vertical {
    flex-direction: column;
    flex-wrap: nowrap;
}

.flex-container.vertical > * {
    flex: none;
    margin-top: 0;
    margin-bottom: 0;
}

:is(label, .label) > .flex-container > :is(label, .label) {
    display: flex;
    align-items: center;
}

.no-gap {
    gap: 0 !important;
}

.no-wrap {
    flex-wrap: nowrap !important;
}

.no-flex, .no-flex > * {
    flex: none !important; /* don't stretch items (item(s) should have default width) */
}

[data-type="multistep"] .button-wrapper {
    flex-direction: row;
}

[data-type="multistep"] .button-wrapper > [name="prev"] {
    margin-left: 0;
}

[data-type="multistep"] .button-wrapper > [name="next"] {
    margin-left: auto;
}

.button-wrapper, .button-wrapper.align-right {
    flex-direction: row-reverse;
}

.button-wrapper.align-left {
    flex-direction: row;
}

.button-wrapper.align-center {
    flex-direction: row;
    justify-content: center;
}

.button-wrapper.space-between {
    flex-direction: row;
    justify-content: space-between;
}

.button-wrapper > small {
    position: absolute;
    left: 0;
}

:is(ul, ol).flex-list {
    display: flex;
    padding: var(--default-padding);
    border: var(--default-border);
    background: var(--color-scheme-background-color);
}

:is(ul, ol).flex-list > li {
    list-style-type: none;
    margin: 0;
    flex: 1;
}

.word-break-keep-all {
    word-break: keep-all;
}
/* end flex-containers ------------------------------------------------------------------------------------------ */

/* begin forms: basic elements ------------------------------------------------------------------------------------------ */
form [class*="grid-container"] {
    grid-auto-rows: min-content;
    grid-template-rows: min-content;
}

/* begin fieldsets */
fieldset {
    background: var(--default-background-color);
    border: var(--default-border);
    border-radius: var(--border-radius);
    padding: calc(var(--default-padding) * 2);
}

fieldset.flex-container {
    display: flex;
    gap: var(--default-gap);
    flex-direction: column;
}

fieldset.grid-container-create-columns {
    grid-template-columns: min-content; /* items should be minimum as wide as content */
}

fieldset.grid-container-create-columns > *,
fieldset.grid-container-create-columns .grid-container-create-columns {
    grid-column: span var(--grid-columns);
}

fieldset fieldset {
    margin-bottom: 0;
}

fieldset legend {
    font-weight: bold; /* font-weight of legends */
    padding: 0 .3rem .3rem .3rem; /* padding of legends */
}

fieldset.success, :where(label, .label).success :where(input:not([type="range"]), select, textarea, .input, .replace-input-type) {
    border-color: var(--success-color);
}

fieldset.warning, :where(label, .label).warning :where(input:not([type="range"]), select, textarea, .input, .replace-input-type) {
    border-color: var(--warning-color);
}

fieldset.error, :where(label, .label).error :where(input:not([type="range"]), select, textarea, .input, .replace-input-type) {
    border: var(--error-border);
}

fieldset.info, :where(label, .label).info :where(input:not([type="range"]), select, textarea, .input, .replace-input-type) {
    border-color: var(--info-color);
}

fieldset.disabled, :where(label, .label).disabled span {
    color: var(--disabled-color) !important;
}

fieldset > *:first-child,
fieldset legend + * {
    margin-top: 0;
}

fieldset[class*="grid-container"] > * {
    grid-column: 1 / span var(--grid-columns);
    margin-bottom: 0;
}

fieldset hr {
    margin: var(--default-margin);
}

fieldset hr + * {
    margin-top: 0;
}
/* end fieldsets */

/* begin labels */
label, .label {
    display: block;
}

:where(label, .label) :where(button, .button) button {
    align-self: stretch;
}

:where(label, .label).inline {
    display: flex;
}

:where(label, .label).inline:not(.textarea) > * {
    align-self: center;
    white-space: nowrap;
}

:where(label, .label) > span {
    line-height: 100%;
    white-space: normal;
}

:where(label, .label).inline > span {
    grid-column: span var(--grid-small-span);
    white-space: normal;
    margin: 0 var(--default-margin) 0 0;
}

:where(label, .label).inline > span + * {
    grid-column: span var(--grid-large-span);
}

.label-text sup {
    font-size: 1.5rem; /* overwrite normalize.css */
    top: -.2rem; /* overwrite normalize.css */
    color: var(--primary-color);
}

:where(label, .label):focus input + span {
    color: var(--primary-color);
}

.grid-container-create-columns > :where(label, .label) {
    grid-column: 1 / span var(--grid-columns);
}

td .toggle-switch.switch-label {
    display: inline-flex;
}

/* use :where for selectors to set specificity to 0 */
:where(label, .label):not(.inline) :where(.label-text:not(.hidden)) {
    display: flex;
    margin-bottom: calc(var(--default-margin) / 2);
}

input + .label-text {
    display: inline-flex;
    margin-bottom: 0;
}

label :where(input, select, textarea, .input):not(:first-child) {
    display: block;
    width: 100%;
}

label > :where(input[type="checkbox"], input[type="radio"]) {
    display: inline-block;
    width: auto;
}

:where(label, .label) .label-text [class*="icon"] {
    align-self: flex-start; /* avoids stretching if label wraps */
    background: var(--pure-white);
    border-radius: var(--full-circle);
    color: var(--text-color);
}

:is(label, .label).error .label-text * {
    color: var(--error-color);
}

:is(label, .label).warning .label-text * {
    color: var(--warning-color);
}

:is(label, .label).success .label-text * {
    color: var(--success-color);
}

:is(label, .label).info .label-text * {
    color: var(--info-color);
}

:is(label, .label) span > a {
    font-size: var(--font-size);
    margin-left: auto;
}
/* end labels */

/* begin form-elements */
input, select, textarea, .input {
    min-width: 5rem;
    border: var(--default-border);
    border-radius: var(--border-radius);
    align-self: flex-end; /* required to let items be as high as their content */
    background: var(--color-scheme-background-color);
}

:is(input, select, textarea, .input):is(:hover, :active, :focus) {
    border-color: var(--primary-color);
}

input:checked + span {
    color: var(--primary-color);
}

input, select, .input {
    height: var(--input-height); /* forces different browsers to render same height */
    padding: 1rem .1rem 1rem .5rem;
}

select {
    padding-top: 0; /* avoids text to be cropped */
    padding-bottom: 0; /* avoids text to be cropped */
}

select[multiple] {
    max-height: 10rem;
}

input[type="search"] {
    align-self: stretch;
    box-sizing: border-box; /* overwrite normalize.css */
}

input[type="search"] + button {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
}

input:where([type="checkbox"], [type="radio"]):focus + span {
    color: var(--primary-color);
}

::placeholder {
    font-style: italic;
}

:where(input, textarea, .input).error::placeholder {
    color: var(--error-color);
}

select {
    word-wrap: normal; /* break words only at allowed break points */
}

input:where([type="radio"], [type="checkbox"]) {
    margin-bottom: 0;
    min-width: auto;
    height: auto;
}

input[type="file"] {
    padding-top: .8rem;
    padding-bottom: .7rem;
}

input[type="color"] {
    padding: 0;
}

:where(label, .label) > input {
    margin-top: 0;
    margin-left: 0;
}

textarea {
    overflow-x: hidden;
    overflow-y: scroll;
    min-height: 16.5rem;
    padding: calc(var(--default-padding) / 2);
}

input[type="image"] {
    width: auto;
    height: auto;
    padding: 0;
    margin: 0 .3rem;
    border: 0;
}

input:where([type="checkbox"], [type="radio"], [type="image"]) {
    background: none;
    width: auto;
}

.inline input:where([type="date"], [type="number"], [type="color"]) {
    max-width: 14rem;
}

input[type="submit"] input:where(:hover, :active, :focus) {
    cursor: pointer;
}

:where(input, select):not([type="hidden"]) + input, :where(input:not([type="hidden"]), select) + select {
    border-left: 0;
}

:is(input, select, textarea):invalid {
    border-color: var(--error-color);
}
/* end form-elements */

/* begin form-elements in table */
td :where(label, .label, select, textarea, .input) {
    width: 100%;
    margin: 0;
}

td :where(label, .label) {
    width: auto;
    padding: 0;
}
/* end form-elements in table */

/* begin .input-wrapper/.input-group */
.input-wrapper, .input-group {
    display: flex;
    gap: 0;
    align-items: flex-end;
    flex-wrap: nowrap;
}

:is(.input-wrapper, .input-group) > * {
    flex: auto;
}

:is(.input-wrapper, .input-group) > :is(label, .label):first-child :is(input, select) {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}
/* end .input-wrapper/.input-group */
/* end forms: basic elements ------------------------------------------------------------------------------------------ */

/* begin forms: replace-input-type (radio/checkbox) ------------------------------------------------------------------------------------------ */
label input.replace-input-type { /* label required for specificity */
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    width: 1.28rem;
    height: 1.28rem;
    padding: .1rem;
    border: var(--default-border);
    border-color: var(--color-scheme-text-color);
    border-radius: var(--full-circle);
    background: var(--pure-white);
    box-shadow: none;
    display: inline-flex; /* avoids label-text to wrap */
}

label input.replace-input-type:is(:hover, :active, :focus),
label input.replace-input-type:checked:is(:hover, :active, :focus)::after {
    border-color: var(--hyperlink-color-highlighted);
}

label input.replace-input-type:is(:hover, :active, :focus) + .label-text {
    color: var(--hyperlink-color-highlighted);
}

label input[type="radio"].replace-input-type:checked:is(:hover, :active, :focus)::after {
    background-color: var(--hyperlink-color-highlighted);
}

input.replace-input-type.error,
input.replace-input-type.error:checked {
    border-color: var(--error-color);
}

input.replace-input-type.error:checked::after {
    background: var(--error-color);
}

input.replace-input-type:checked {
    border-color: var(--primary-color);
}

input.replace-input-type:checked::after {
    content: "";
    border-radius: var(--full-circle);
    background: var(--primary-color);
    width: 0.8rem;
    height: 0.8rem;
    align-self: center;
    margin: 0 auto;
    display: block;
}

input[type="radio"].replace-input-type:disabled:checked::after {
    background: var(--disabled-color) !important;
}

input[type="checkbox"].replace-input-type {
    border-radius: 0;
}

/* the check */
input[type="checkbox"].replace-input-type:checked::after {
    content: "";
    width: 0.9rem;
    height: 0.5rem;
    border-radius: 0;
    border: .2rem solid var(--primary-color);
    border-top: 0;
    border-right: 0;
    background: none;
    transform: rotate(-45deg) skewX(-10deg);
    position: absolute;
    bottom: 0.45rem;
}

input[type="checkbox"][disabled].replace-input-type:checked::after {
    border-color: var(--disabled-color);
}

input[type="checkbox"].error.replace-input-type:checked::after {
    border-color: var(--error-color);
}

input.replace-input-type:checked + .label {
    color: var(--primary-color);
}

input.replace-input-type.error:checked + .label {
    color: var(--error-color);
}

input[disabled].replace-input-type:checked + .label {
    color: var(--disabled-color);
}

input.replace-input-type-checkbox.error:not(:checked) {
    border-color: var(--error-color);
}
/* end forms: replace-input-type (radio/checkbox) ------------------------------------------------------------------------------------------ */

/* begin forms: progressbar ------------------------------------------------------------------------------------------ */
progress {
    -webkit-appearance: progress-bar;
    -webkit-writing-mode: horizontal-tb;
}

progress[value] {
    /* Reset the default appearance */
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    width: 25rem;
    border-radius: var(--border-radius);
    border: var(--primary-border);
    background: var(--color-scheme-background-color); /* background-color for entire bar - does not work on -webkit-browsers */
    box-shadow: none;
}

/* required for webkit (only way to style progress-bar/overwrite default behavior) */
progress[value]::-webkit-progress-bar {
    background: var(--color-scheme-background-color); /* background-color for entire bar in webkit */
}

progress[value]::-webkit-progress-value {
    background-image: -webkit-repeating-linear-gradient(-45deg, var(--primary-color), var(--primary-color) .7rem, var(--primary-color) .7rem, var(--primary-color) 1.4rem);
}

progress[value]::-moz-progress-bar {
    border-top-left-radius: var(--border-radius);
    border-bottom-left-radius: var(--border-radius);
    background-image: repeating-linear-gradient(-45deg, var(--primary-color), var(--primary-color) .7rem, var(--primary-color) .7rem, var(--primary-color) 1.4rem);
}
/* end forms: progressbar ------------------------------------------------------------------------------------------ */

/* begin forms: range-slider ------------------------------------------------------------------------------------------ */
input[type="range"] {
    -webkit-appearance: none;
    background: unset;
    border: 0;
}

input[type="range"]:focus {
    outline: none;
}

input[type="range"]::-webkit-slider-runnable-track {
    height: .4rem;
    border: none;
    border-radius: .2rem;
}

input[type="range"]::-moz-range-track {
    height: .4rem;
    border: none;
    border-radius: .2rem;
}

/* the thumb */
input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    border: none;
    height: 1.6rem;
    width: 1.6rem;
    border-radius: 50%;
    margin-top: -.7rem;
    background: var(--color-scheme-background-color);
    border: var(--primary-border);
}

input[type="range"]::-moz-range-thumb {
    border: none;
    height: 1.6rem;
    width: 1.6rem;
    border-radius: 50%;
    margin-top: -.5rem;
    background: var(--color-scheme-background-color);
    border: var(--primary-border);
}

/* the track */
input[type="range"]::-webkit-slider-runnable-track {
    background: var(--color-scheme-background-color);
    border: var(--primary-border);
}

input[type="range"]::-moz-range-track {
    background: var(--color-scheme-background-color);
    border: var(--primary-border);
}

/* focus the track */
/* do not set :focus for IE - styles are controlled by -ms-fill-lower/-ms-fill-upper */
input[type="range"]:focus::-webkit-slider-runnable-track {
    background: var(--primary-color);
}

input[type="range"]:focus::-moz-range-track {
    background: var(--primary-color);
}

/* disabled styles */
input[type="range"]:is([disabled], .disabled),
input[type="range"]:is([disabled], .disabled):is(:hover, :active, :focus) {
    background: none !important;
}

input[type="range"]:is([disabled], .disabled)::-moz-range-thumb {
    background: var(--disabled-background-color);
    border-color: var(--disabled-color);
}

input[type="range"]:is([disabled], .disabled)::-webkit-slider-thumb {
    background: var(--disabled-background-color);
    border-color: var(--disabled-color);
}

input[type="range"]:is([disabled], .disabled)::-moz-range-track {
    background: var(--disabled-background-color);
    border-color: var(--disabled-color);
}

input[type="range"]:is([disabled], .disabled)::-webkit-slider-runnable-track {
    background: var(--disabled-background-color);
    border-color: var(--disabled-color);
}
/* end forms: range-slider ------------------------------------------------------------------------------------------ */

/* begin toggle-switch-checkbox and -radio ------------------------------------------------------------------------------------------ */
.toggle-switch {
    flex: none;
    display: flex;
    align-items: center;
}

.toggle-switch .label-text {
    align-self: center;
    margin-top: 0;
    margin-bottom: 0;
}

.toggle-switch input:where([type="checkbox"], [type="radio"]) { /* type required for specificity */
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    width: 4rem;
    height: 2rem;
    border-radius: 1rem;
    padding: .2rem;
    border: var(--default-border);
    background: var(--color-scheme-background-color);
    box-shadow: none;
    display: flex;
}

.toggle-switch input::after {
    content: "";
    border-radius: var(--full-circle);
    border: var(--default-border);
    background: var(--color-scheme-background-color);
    width: 1.4rem;
    height: 1.4rem;
    display: block;
    align-self: center;
}

.toggle-switch input:checked {
    border-color: var(--primary-color);
}

.toggle-switch input[disabled]::after {
    border-color: var(--disabled-color) !important;
}

.toggle-switch:is(:hover, :active, :focus) input,
.toggle-switch:is(:hover, :active, :focus) input::after {
    border-color: var(--hyperlink-color-highlighted);
}

.toggle-switch:is(:hover, :active, :focus) *,
.toggle-switch:is(:hover, :active, :focus) input:checked + .label-text {
    color: var(--hyperlink-color-highlighted);
}

/* begin checked toggle-switch */
.toggle-switch input:checked ~ .label-text {
    color: var(--primary-color)
}

.toggle-switch input:checked::after {
    border-color: var(--primary-color);
    background: var(--primary-color);
    margin-left: auto
}

.toggle-switch input:checked:is(:hover, :active, :focus)::after {
    border-color: var(--hyperlink-color-highlighted);
    background: var(--hyperlink-color-highlighted);
}
/* end checked toggle-switch */

.toggle-switch input[class*="icon"]::before {
    position:absolute;
    z-index: 10;
    font-size: 1.6rem;
    top: 50%;
    transform: translateY(-50%);
    left: .2rem;
}

.toggle-switch input[class*="icon"]::after,
.toggle-switch input[class*="icon"]:checked:disabled::after {
    border: 0 !important;
    background: none !important;
}

.toggle-switch input[class*="icon"]:checked::before {
    left: auto;
    right: .2rem;
    color: var(--primary-color);
}

.toggle-switch input[class*="icon"]:checked:disabled::before {
    color: var(--disabled-color);
}

.toggle-switch.error .label-text {
    color: var(--error-color);
}

.toggle-switch.error input:not(:checked) {
    border-color: var(--error-color);
}

.toggle-switch.error input:not(:checked)::after {
    border-color: var(--error-color);
    background: var(--error-color);
}
/* end toggle-switch-checkbox and -radio ------------------------------------------------------------------------------------------ */

/* begin toggle switches with switch-label ------------------------------------------------------------------------------------------ */
.toggle-switch .switch-label-wrapper {
    display: flex;
    border: var(--default-border);
    background: var(--color-scheme-background-color);
    border-radius: 1.2rem;
    overflow: hidden;
    height: 2rem;
    padding: .2rem var(--default-padding);
    align-self: center;
}

.toggle-switch .switch-label-wrapper input {
    border: 0;
    background: none;
    display: none;
}

.toggle-switch .switch-label-wrapper input ~ .label-text {
    white-space: nowrap;
    left: 0;
}

.toggle-switch .switch-label-wrapper input + .label-text {
    padding-right: var(--default-padding);
    display: block;
}

.toggle-switch .switch-label-wrapper input:not(:checked) + .label-text:not(:only-child) {
    position: absolute;
    left: 100%;
}

.toggle-switch .switch-label-wrapper input + .label-text + .label-text {
    padding-left: var(--default-padding);
    text-align: right;
}

.toggle-switch .switch-label-wrapper input:checked + .label-text + .label-text {
    left: -100%;
    position: absolute;
}

.toggle-switch .switch-label-wrapper input ~ .label-text::before {
    content: "";
    border-radius: var(--full-circle);
    border: var(--primary-border);
    background: var(--primary-color);
    width: 1.4rem;
    height: 1.4rem;
    display: block;
    align-self: center;
    position: absolute;
    right: -.7rem;
    top: 0;
}

.toggle-switch:is(:hover, :active, :focus) .switch-label-wrapper,
.toggle-switch:is(:hover, :active, :focus) .switch-label-wrapper input + .label-text::before {
    border-color: var(--hyperlink-color-highlighted);
    color: var(--hyperlink-color-highlighted);
}

.toggle-switch:is(:hover, :active, :focus) .switch-label-wrapper input + .label-text {
    color: var(--hyperlink-color-highlighted);
}

.toggle-switch .switch-label-wrapper input + .label-text + .label-text::before {
    border-color: var(--color-scheme-text-color);
    background: var(--color-scheme-background-color);
    left: -.7rem;
    top: 0;
}

.toggle-switch:is(:hover, :active, :focus) .switch-label-wrapper input:checked + .label-text::before {
    background: var(--hyperlink-color-highlighted);
}

.toggle-switch:is(:hover, :active, :focus) .switch-label-wrapper input + .label-text + .label-text::before {
    border-color: var(--hyperlink-color-highlighted);
}

.toggle-switch .switch-label-wrapper + span {
    margin-left: calc(var(--default-margin) / 2);
}
/* end toggle switches with switch-label ------------------------------------------------------------------------------------------ */

/* begin multiple-switch  ------------------------------------------------------------------------------------------ */
.multiple-switch input {
    display: none !important;
}

.multiple-switch label {
    padding: var(--default-padding);
    margin: 0;
    background: var(--color-scheme-background-color);
    border: var(--default-border);
    border-left: 0;
    flex-direction: column;
}

.multiple-switch.disabled label {
    background: var(--disabled-background-color) !important;
}

.multiple-switch.disabled label:hover {
    cursor: not-allowed;
}

.multiple-switch label:first-child {
    border-left: var(--default-border);
    border-top-left-radius: var(--border-radius);
    border-bottom-left-radius: var(--border-radius);
}

.multiple-switch label:last-child {
    border-top-right-radius: var(--border-radius);
    border-bottom-right-radius: var(--border-radius);
}

.multiple-switch label:where(:hover, :active, :focus) {
    cursor: pointer;
}

.multiple-switch label:is(:hover, :active, :focus) input ~ span,
.multiple-switch label input:checked ~ span {
    color: var(--primary-color);
}

.multiple-switch label span {
    display: block;
    text-align: center;
    width: 100%;
    margin: 0;
}

.multiple-switch label [class*="icon"] {
    font-size: 3rem;
    margin-bottom: calc(var(--default-margin) / 2);
}

.multiple-switch label.active {
    background: var(--primary-color);
}

.multiple-switch label.active input:checked ~ span {
    color: var(--color-scheme-background-color);
}

.multiple-switch label.disabled {
    background: var(--disabled-background-color);
}
/* end multiple-switch ------------------------------------------------------------------------------------------ */

/* begin place-inside (place icon inside/over inputfield) ------------------------------------------------------------------------------------------ */
.place-inside[class*="icon-"] {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    left: var(--default-margin);
    z-index: 10;
    color: var(--color-scheme-text-color);
    margin: 0;
}

:is(label, .label).inline .place-inside {
    display: none;
}

.place-inside.focus[class*="icon-"] {
    color: var(--primary-color);
}

.place-inside.error[class*="icon-"] {
    color: var(--error-color);
}

.place-inside.warning[class*="icon-"] {
    color: var(--warning-color);
}

.place-inside.success[class*="icon-"] {
    color: var(--success-color);
}

.place-inside.info[class*="icon-"] {
    color: var(--info-color);
}

.place-inside[class*="icon-"] + :is(input, select, textarea, .input){
    padding-left: calc(var(--default-padding) * 3);
}

.place-inside[class*="icon-"] + input:focus {
    border-color: var(--primary-color);
}
/* end place-inside (place icon inside/over inputfield) ------------------------------------------------------------------------------------------ */

/* begin grid-containers ------------------------------------------------------------------------------------------ */
[class*="grid-container"] {
    display: grid;
    grid-gap: var(--grid-gap);
}

[class*="grid-container"] > [class*="grid-item"] {
    grid-column: span var(--grid-small-span);
}

[class*="grid-container"].stretch-items {
    grid-auto-rows: auto;
}

.grid-container-create-columns {
    grid-template-columns: repeat(var(--grid-columns), minmax(0, 1fr)); /* creates grid-container with predefined number of columns */
}

.grid-container-auto-columns {
    grid-template-columns: repeat(auto-fit, minmax(0, 1fr));
}

.grid-container-create-columns > .grid-item-full-width {
    grid-column: span var(--grid-columns);
}

.grid-container-create-columns > .grid-item-half-width {
    grid-column: span calc(var(--grid-columns) / 2);
}

.grid-container-create-columns > .grid-small-item {
    grid-column: span var(--grid-small-span);
}

.grid-container-create-columns > .grid-large-item {
    grid-column: span var(--grid-large-span);
}

/* begin golden-ratio */
:is(.flex-container, [class*="grid-container"]) > .golden-ratio-large-item {
    width: 61.8%
}

:is(.flex-container, [class*="grid-container"]) > .golden-ratio-small-item {
    width: 38.2%
}
/* end golden-ratio */
/* end grid-containers ------------------------------------------------------------------------------------------ */

/* begin headlines ------------------------------------------------------------------------------------------ */
h1, h2, h3, h4, h5, h6 {
    font-weight: var(--headline-font-weight);
    margin-top: calc(var(--default-margin) * 2);
}

h1, h1 + h2, h2 + h3, h3 + h4, h4 + h5, h5 + h6,
:where(h2, h3, h4, h5, h6):first-child {
    margin-top: 0;
}

[class*="grid-container"] > :where(h1, h2, h3, h4, h5, h6) {
    margin-bottom: 0;
}

h1, h2, h3, h4, h5, h6,
:where(h1, h2, h3, h4, h5, h6) > a {
    line-height: 130%;
}

h1, h1 > a, h1 > span, h1 > span[class*="icon-"] {
    font-size: 3rem; /* font-size for h1 */
}

h2, h2 > a, h2 > span, h2 > span[class*="icon-"] {
    font-size: 2.6rem; /* font-size for h2 */
}

h3, h3 > a, h3 > span, h3 > span[class*="icon-"] {
    font-size: 2.2rem; /* font-size for h3 */
}

h4, h4 > a, h4 > span, h4 > span[class*="icon-"] {
    font-size: 2rem; /* font-size for h4 */
}

h5, h5 > a, h5 > span, h5 > span[class*="icon-"] {
    font-size: 1.8rem; /* font-size for h5 */
}

h6, h6 > a, h6 > span, h6 > span[class*="icon-"] {
    font-size: 1.6rem; /* font-size for h6 */
}
/* end headlines ------------------------------------------------------------------------------------------ */

/* begin hyperlinks & anchors ------------------------------------------------------------------------------------------ */
a {
    color: var(--hyperlink-color);
}

a:is(:hover, :active, :focus),
a:is(:hover, :active, :focus) > * {
    color: var(--hyperlink-color-highlighted);
}

a[class*="icon-"]:not(.button),
a:not(.button) [class*="icon-"] {
    color: var(--color-scheme-text-color);
}

a[class*="icon-"]:not(.button):is(:hover, :active, :focus, .active),
a:not(.button):is(:hover, :active, :focus, .active) [class*="icon-"],
.highlighted {
    color: var(--primary-color);
}

a span[class*="icon"]:not(:only-child) {
    font-size: var(--font-size); /* adjust icon to size as text */
}

/* begin active links */
a.active:not([class*="icon"]), li.active > a:not([class*="icon"]) {
    background: var(--primary-color);
    color: var(--pure-white);
}

:is(a, li).active :is(span, span[class*="icon"]) {
    color: var(--pure-white);
}

li a.active {
    padding: .2rem calc(var(--default-padding) / 2);
    text-decoration: none;
}

li a.active:is(:hover, :active, :focus) {
    color: var(--primary-color);
    background: none
}
/* end active links */

/* set display 'inline-block' to avoid font-size-rendering for empty anchors in firefox */
a[id]:not([href]):empty {
    display: inline-block;
}
/* end hyperlinks & anchors ------------------------------------------------------------------------------------------ */

/* begin icons ------------------------------------------------------------------------------------------ */
[class*="icon-"] {
    font-size: var(--icon-size);
    text-decoration: none !important;
    display: inline-block;
    vertical-align: text-bottom;
}

[class*="icon-"] > * {
    font-family: var(--font-family);
    font-size: var(--font-size);
}

[class*="icon-"].button, button[class*="icon-"] {
    line-height: 100%;
}

[class*="icon-"] + span,
span + [class*="icon-"] {
    margin-left: calc(var(--default-margin) / 2);
}

:where(h1, h2, h3, h4, h5, h6) [class*="icon-"] + span {
    margin-left: var(--default-margin);
}
/* end icons ------------------------------------------------------------------------------------------ */

/* begin lists ------------------------------------------------------------------------------------------ */
/* indent for nested lists */
:where(ul, ol) {
    margin: 0 0 0 var(--default-margin);
}

/* text-indent for second-line */
:where(ul, ol) li {
    list-style-type: disc;
    list-style-position: outside;
    margin-left: 1.7rem;
}

ol li {
    list-style-type: decimal;
}

dl {
    display: grid;
    grid-gap: .2rem 1rem; /* row, column */
    grid-auto-rows: min-content;
    grid-template-columns: min-content max-content;
}

dt {
    white-space: nowrap;
}

dd {
    grid-column: 2;
}

dl.wrap {
    grid-template-columns: min-content auto;
}

dl.wrap dd {
    white-space: normal;
    word-break: break-all; /* break long strings */
}
/* end lists ------------------------------------------------------------------------------------------ */

/* begin navigation ------------------------------------------------------------------------------------------ */
/* wrapper must have id to keep high specificity */
#main-navigation-wrapper {
    background: var(--default-background-color);
    border-top: var(--default-border);
    border-bottom: var(--default-border);
}

nav {
    width: 100%;
    padding-left: var(--default-padding);
    padding-right: var(--default-padding);
}

:where(nav, .nav) ul {
    margin: 0;
    display: flex;
    border-left: var(--default-border);
    border-right: var(--default-border);
    background: var(--default-background-color);
}

:where(nav, .nav) > ul > li {
    border-right: var(--default-border);
}

:where(nav, .nav) ul.stretch-items > li {
    flex: 1
}

:where(nav, .nav) ul li {
    list-style-type: none;
    margin: 0;
    white-space: nowrap;
}

:where(nav, .nav) ul li a {
    display: flex;
    align-items: center;
    padding: var(--default-padding);
    text-decoration: none;
    color: var(--color-scheme-text-color);
}

:is(nav, .nav) ul li a:is(:hover, :active, :focus),
:is(nav, .nav) ul li.active a {
    background: var(--primary-color);
    color: var(--pure-white);
}

:is(nav, .nav) ul li a:is(:hover, :active, :focus) span,
:is(nav, .nav) ul li.active a span {
    background: none;
    color: var(--pure-white);
}

#main-navigation-wrapper nav ul li a span[class*='icon-'] {
    font-size: var(--icon-size);
}

/* do not remove id to keep high specificity */
#main-navigation-wrapper nav ul li a span[class*='icon-'].subentry-icon {
    font-size: var(--font-size-small);
}

nav ul li li a span[class*='icon-'].subentry-icon::before {
    display: inline-block;
    transform: rotate(-90deg);
}

:where(nav, .nav) ul ul {
    display: none;
    position: absolute; /* brings sub-navigation to own layer */
    left: 0; /* left-position of layer (as left as top-level-entries) */
    z-index: 100; /* brings sub-navigation to front */
    min-width: 100%;
    border-bottom: var(--default-border);
}

:where(nav, .nav) ul ul li {
    border-top: var(--default-border);
}

:where(nav, .nav) ul ul li:last-child {
    border-bottom: 0;
    border-bottom-left-radius: var(--border-radius);
    border-bottom-right-radius: var(--border-radius);
}

:where(nav, .nav) ul ul ul {
    top: 0;
    left: 100%;
}

:is(nav, .nav) li:is(:hover, :active, :focus) > ul,
:is(nav, .nav) li.active > ul {
    display: block;
}
/* end navigation ------------------------------------------------------------------------------------------ */

/* begin system messages ------------------------------------------------------------------------------------------ */
.system-message {
    border-radius: var(--border-radius);
    display: flex;
    font-weight: bold;
    padding: var(--default-padding);
    margin-bottom: var(--default-margin);
    border: var(--default-border);
    border-width: .2rem;
    background: var(--system-message-background-color);
    -webkit-background-clip: padding-box; /* important to keep border transparent */
    background-clip: padding-box; /* important to keep border transparent */
}

.system-message > .message-headline {
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0;
}

.system-message *, .system-message [class*="icon"] {
    color: var(--system-message-text-color);
}

.system-message .message-headline {
    margin: 0 auto;
}

.system-message.error {
    --system-message-background-color: var(--error-color);
    border-color: hsla(var(--error-color-hsl-values), var(--reduced-opacity));
}

.system-message.warning {
    --system-message-background-color: var(--warning-color);
    border-color: hsla(var(--warning-color-hsl-values), var(--reduced-opacity));
}

.system-message.warning * {
    color: var(--text-color);
}

.system-message.success {
    --system-message-background-color: var(--success-color);
    border-color: hsla(var(--success-color-hsl-values), var(--reduced-opacity));
}

.system-message.info {
    --system-message-background-color: var(--info-color);
    border-color: hsla(var(--info-color-hsl-values), var(--reduced-opacity));
}

.grid-container-create-columns .system-message {
    grid-column: span var(--grid-columns);
}
/* end system messages ------------------------------------------------------------------------------------------ */

/* begin tables ------------------------------------------------------------------------------------------ */
.table-wrapper {
    overflow-x: auto;
}

.table-wrapper table {
    margin-bottom: 0;
}

table {
    border: var(--default-border);
    border-radius: var(--border-radius);
}

table.full-width {
    display: table; /* tables must have display: table; */
}

[class*="grid-container"] table {
    align-self: start;
}

tr {
    background: var(--color-scheme-background-color);
}

th, td {
    padding: var(--default-padding);
    border: var(--default-border);
    border-top: 0;
    border-left: 0;
}

th {
    background: var(--primary-color);
    border-right: var(--default-border);
    border-right-color: var(--color-scheme-text-color-inverted);
    color: var(--pure-white);
    font-size: 1.5rem;
    font-weight: bold;
    white-space: nowrap;
}

th[scope="row"] {
    border-radius: 0;
    border-bottom: var(--default-border);
    border-bottom-color: var(--pure-white);
}

tr:last-child th[scope="row"] {
    border-bottom: 0;
}

thead, th:first-child, th:last-child {
    border-radius: var(--border-radius);
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
}

th:first-child {
    border-top-right-radius: 0;
}

:where(th, td):last-child {
    border-right: 0;
}

th:last-child {
    border-top-left-radius: 0;
}

td {
    vertical-align: middle;
}

tr:is(:hover, :active, :focus) td {
    background: var(--color-scheme-background-color);
}

td[colspan] {
    text-align: center;
}

thead tr {
    border-top-left-radius: var(--border-radius);
    border-top-right-radius: var(--border-radius);
}

tfoot tr, tbody:last-child tr:last-of-type {
    border-bottom-left-radius: var(--border-radius);
    border-bottom-right-radius: var(--border-radius);
}

tr:last-of-type td {
    border-bottom: 0;
}

tr:last-of-type td:first-child {
    border-bottom-left-radius: var(--border-radius);
}

tr:last-of-type td:last-child {
    border-bottom-right-radius: var(--border-radius);
}

tfoot {
    border: var(--default-border);
}

tfoot td {
    border-top: var(--default-border);
}

/* begin highlighted table rows/cells */
th.highlighted {
    color: var(--pure-white);
}

tr.highlighted td, td.highlighted {
    background: hsl(var(--primary-color-hue), 70%, var(--primary-color-lightness));
    color: var(--pure-white);
}

tr.highlighted:is(:hover, :active, :focus) td,
td.highlighted:is(:hover, :active, :focus),
tr:is(:hover, :active, :focus) td.highlighted {
    background: var(--primary-color);
}
/* end highlighted table rows/cells */

table a {
    display: block;
}

:where(table, td).center-content td {
    text-align: center;
}

td.center-content :is(button, .button) {
    float: none;
    display: table;
    margin: 0 auto;
}

table.center-content td input {
    float: none;
    text-align: center;
}

thead.word-wrap-normal th {
    word-wrap: normal; /* break words only at allowed break points */
}

td form {
    margin-bottom: 0; /* margin-bottoms of forms in table-cells */
}

td .toggle-switch > span {
    white-space: nowrap;
}
/* end tables ------------------------------------------------------------------------------------------ */
/* ---------------------------------------------- END MAIN STYLES -------------------------------------------------- */

/* ---------------------------------------------- BEGIN MEDIA QUERIES AND BROWSER SPECIFIC STYLES -------------------------------------------------- */
/* begin styles webkit-browsers only ------------------------------------------------------------------------------------------ */
@media screen and (-webkit-min-device-pixel-ratio: 0) {
    :where([type="color"], [type="date"], [type="datetime-local"], [type="email"], [type="month"], [type="number"],
	[type="range"], [type="search"], [type="tel"], [type="time"], [type="url"], [type="week"]) {
        -webkit-appearance: none; /* avoid default rounded border on safari */
    }
}

html::-webkit-scrollbar {
    width: 1vw;
}

html::-webkit-scrollbar-thumb {
    background-color: var(--primary-color-reduced-opacity);
    border-radius: var(--border-radius);
}

html::-webkit-scrollbar-thumb:hover { /* do not set :active, :focus (does not work anymore then) */
    background-color: var(--primary-color);
}

html::-webkit-scrollbar-track {
    background-color: var(--light-gray);
}

html::-webkit-scrollbar-track:hover { /* do not set :active, :focus (does not work anymore then) */
    background-color: var(--medium-gray);
}
/* end styles webkit-browsers only ------------------------------------------------------------------------------------------ */

/* ---------------------------------------------- END MEDIA QUERIES AND BROWSER SPECIFIC STYLES -------------------------------------------------- */

/* begin styles for print only ------------------------------------------------------------------------------------------ */
@media only print {
    * {
        color: var(--dark-gray);
    }

    a[href]:after {
        content: " <" attr(href) ">";
        font-style: italic;
    }

    *[cite]:after {
        content: close-quote " (Source: " attr(cite) ")";
    }

    img[alt]:after {
        content: "\A (" attr(alt) ")";
    }
}
/* end styles for print only ------------------------------------------------------------------------------------------ */

/* begin styles for dark-mode only ------------------------------------------------------------------------------------------ */
@media (prefers-color-scheme: dark) {
    html {
        --color-scheme-text-color: var(--dark-mode-text-color);
        --color-scheme-text-color-buttons: var(--dark-mode-text-color-buttons);
        --color-scheme-text-color-inverted: var(--light-mode-text-color);
        --color-scheme-background-inverted: var(--light-mode-background-color);
        --default-background-color-lightness: 20%;
    }

    html::-webkit-scrollbar-track {
        background-color: var(--dark-gray);
    }

    :where(label, .label) .label-text [class*="icon"] {
        background: var(--dark-gray);
    }
}
/* end styles for dark-mode only ------------------------------------------------------------------------------------------ */