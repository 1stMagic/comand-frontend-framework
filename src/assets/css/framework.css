@charset "utf-8";
/*
framework.css - last update: 2021/08/11 by Raphael Biock
IT IS NOT RECOMMENDED TO EDIT THIS FILE (TO AVOID TROUBLESHOOTING AFTER UPDATING) - DO CHANGES IN template.css ONLY
*/

/* begin table of contents ------------------------------------------------------------------------------------------ */
/*
- VARIABLES ------------------------

- MAIN STYLES ------------------------
B ------------------------
  - basic selectors and classes
  - boxes
  - buttons

C ------------------------
  - clearfix

D ------------------------
  - disabled

F ------------------------
  - flex-containers
  - forms: basic elements
  - forms: progressbar
  - forms: range-slider

G ------------------------
  - grid-containers

H ------------------------
  - headlines
  - hyperlinks

I ------------------------
  - icons

L ------------------------
  - lists

N ------------------------
  - navigation

S ------------------------
  - system messages

T ------------------------
  - tables
  - transforms

- MEDIA QUERIES ------------------------
- styles for medium screens
- styles for small screens
- styles for print only
*/
/* end table of contents ------------------------------------------------------------------------------------------ */

/* ---------------------------------------------- BEGIN VARIABLES -------------------------------------------------- */
html {
	/* max-width (used to limit website-content) */
	--max-width: 144rem;

	/* backgrounds */
	--default-background-color-rgb-values: 247, 247, 247; /* default background-color (rgb-value is required to set rgba in other variables) */
	--default-background-color: rgb(var(--default-background-color-rgb-values)); /* default background-color (in rgb) */
	--default-background-color-reduced-opacity: rgba(var(--default-background-color-rgb-values), var(--reduced-opacity)); /* background-color (i.e. for boxes fieldsets) */
	--disabled-background-color-rgb-values: 200, 200, 200; /* disabled background-color in (rgb-value is required to set rgba in other variables) */
	--disabled-background-color: rgb(var(--disabled-background-color-rgb-values)); /* disabled background-color (in rgb) */

	/* borders */
	--border-radius: 0; /* border-radius */
	--full-circle: 50%; /* border-radius for full circles */
	--border-color-rgb-values: 200, 200, 200; /* border-color-rgb-values */
	--border-color: rgb(var(--border-color-rgb-values)); /* border-color */
	--border-width: .1rem; /* border-width */
	--border-style: solid; /* border-style */
	--default-border: var(--border-width) var(--border-style) var(--border-color); /* default-border */
	--default-border-reduced-opacity: var(--border-width) var(--border-style) rgba(var(--border-color-rgb-values), var(--reduced-opacity)); /* default-border */
	--error-border: var(--border-width) var(--border-style) var(--error-color); /* error-border */
	--primary-border: var(--border-width) var(--border-style) var(--primary-color); /* border width primary color (i.e. for :focus-status) */
	--secondary-border: var(--border-width) var(--border-style) var(--secondary-color); /* border width secondary color */
	--disabled-border: var(--border-width) var(--border-style) var(--disabled-color); /* border width disabled color */

	/* colors */
	/* white */
	--pure-white-rgb-values: 255, 255, 255; /* white-color rgb-values */
	--pure-white: rgb(var(--pure-white-rgb-values)); /* white-color */
	--pure-white-reduced-opacity: rgba(var(--pure-white-rgb-values), var(--reduced-opacity)); /* white-color with reduced opacity */

	/* gray */
	--medium-gray-rgb-values: 127, 127, 127; /* medium-gray-color rgb-values */
	--medium-gray: rgb(var(--medium-gray-rgb-values)); /* medium-gray-color */
	--medium-gray-reduced-opacity: rgba(var(--medium-gray-rgb-values), var(--reduced-opacity)); /* white-color with reduced opacity */

	/* black */
	--pure-black-rgb-values: 0, 0, 0; /* black-color with rgb-values */
	--pure-black: rgb(var(--pure-black-rgb-values)); /* black-color */
	--pure-black-reduced-opacity:  rgba(var(--pure-black-rgb-values), var(--reduced-opacity)); /* black-color with reduced opacity */

	/* system-colors (i.e. for errors) */
	--system-message-text-color: var(--pure-white); /* text-color for system-messages */
	--error-color-rgb-values: 184, 25, 0; /* for labels, input-borders, error-messages */
	--error-color: rgb(var(--error-color-rgb-values)); /* for labels, input-borders, error-messages */
	--warning-color-rgb-values: 168, 168, 22; /* for warning-messages */
	--warning-color: rgb(var(--warning-color-rgb-values)); /* for warning-messages */
	--success-color-rgb-values: 0, 119, 0; /* for labels, input-borders, success-messages */
	--success-color: rgb(var(--success-color-rgb-values)); /* for labels, input-borders, success-messages */
	--info-color-rgb-values: 68, 140, 255; /* for info-messages */
	--info-color: rgb(var(--info-color-rgb-values)); /* for info-messages */

	/* primary-color (i.e. for highlights, primary-buttons) */
	--primary-color-rgb-values: 0, 0, 0; /* primary color rgb-values */
	--primary-color: rgb(var(--primary-color-rgb-values)); /* primary layout color */
	--primary-color-reduced-opacity: rgba(var(--primary-color-rgb-values), var(--reduced-opacity)); /* primary-color with reduced opacity */

	/* secondary-color (i.e. for secondary-buttons) */
	--secondary-color-rgb-values: 102, 102, 102; /* secondary color rgb-values */
	--secondary-color: rgb(var(--secondary-color-rgb-values)); /* secondary layout color */
	--secondary-color-reduced-opacity: rgba(var(--secondary-color), var(--reduced-opacity)); /* secondary-color with reduced opacity */

	/* text- and hyperlink-colors */
	--text-color: rgb(40, 40, 40); /* default text-color for complete site except a-tags (hyperlinks) */
	--hyperlink-color: var(--primary-color); /* color for hyperlinks */
	--hyperlink-color-highlighted: var(--secondary-color); /* color for highlighted (:hover, :active, :focus) hyperlinks */
	--hyperlink-text-decoration: underline; /* text-decoration for hyperlinks */
	--hyperlink-text-decoration-highlighted: none; /* text-decoration for highlighted (:hover, :active, :focus) hyperlinks */
	--disabled-color-rgb-values: 80, 80, 80; /* color for disabled elements (rgb-value is required to set rgba in other variables) */
	--disabled-color: rgb(var(--disabled-color-rgb-values)); /* color (in rgb) for disabled elements */

	/* fonts and typography */
	--font-family: arial, sans-serif; /* font-family */
	--font-size: 1.4rem; /* font-size */
	--line-height: 140%; /* line-height */
	--headline-font-weight: bold; /* font-weight for headlines */

    /* form-elements */
	--input-height: 4rem; /* fixed height to render inputs and select same height across different browsers */

	/* paddings, margins and gaps */
	--default-padding: 1rem; /* default paddings */
	--default-margin: 1rem; /* default margins */
	--default-gap: 2rem; /* default gap for flex- and grid-containers */

	/* grid */
	--grid-columns: 12; /* grid-columns */
	--grid-layout-columns: 4; /* layout/optical columns */
	--grid-small-span: 3; /* default column span smaller part */
	--grid-large-span: 9; /* default column span larger part */
	--grid-gap: var(--default-gap); /* grid-gap for grid-items */

	/* opacity */
	--reduced-opacity: .6; /* reduced opacity */

	/* shadows */
	--box-shadow-color: var(--text-color); /* box-shadow-color */
	--box-shadow: .2rem .2rem .2rem var(--box-shadow-color); /* box-shadow */
	--text-shadow-color: var(--text-color); /* text-shadow-color */
	--text-shadow: .1rem .1rem .1rem var(--text-shadow-color); /* text-shadow-color */

	/* transitions */
	--default-transition: all .5s; /* default transition */
}
/* ---------------------------------------------- END VARIABLES -------------------------------------------------- */

/* ---------------------------------------------- BEGIN MAIN STYLES -------------------------------------------------- */
/* begin basic selectors and classes ------------------------------------------------------------------------------------------ */
* {
	content-visibility: auto; /* renders content if its inside the viewport */
}

html {
	font-size: 62.5%; /* default size is 16px, 62.5% of that is 10px = 1rem */
	scroll-behavior: smooth; /* let pages scroll smoothly to anchors */
}

html, textarea {
	font-family: var(--font-family);
}

html, body {
	height: 100%; /* maximises visible area. do not set to "min-height" (important to fix footer at bottom!) */
	background: var(--pure-white); /* necessary for accessibility to set default value */
}

body  {
	color: var(--text-color);
	word-wrap: break-word; /* breaks word at the end of the line */
	font-size: var(--font-size); /* sets the default font-size for every element */
	line-height: var(--line-height); /* improves reading on the screen. default is 120% */
}

.no-padding {
	padding: 0 !important;
}

.default-padding {
	padding: var(--default-padding);
}

.default-padding > *:last-child {
	margin-bottom: 0;
}

.default-margin {
	margin: var(--default-margin);
}

.hide-for-small-up, .hide-for-medium-up {
	display: none !important;
}

time {
	display: inline;
}

object, svg, img, video, canvas, .responsive-wrapper, .responsive-container {
	max-width: 100%;
	height: auto;
}

.responsive-container, .responsive-wrapper {
    position: relative;
    padding-bottom: 56.25%; /* 16:9 videos only */
    padding-top: 3.5rem;
    height: 0;
    overflow: hidden;
}

:is(.responsive-container, .responsive-wrapper) iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.center-item-wrapper {
	display: grid;
	align-items: center;
	justify-content: center;
}

.full-width, .full-height {
	display: block; /* sets element to a block-element */
	float: none;    /* element should not float */
}

.full-width {
	width: 100% !important; /* overwrite all set widths */
	max-width: none !important; /* overwrite all set max-widths */
}

.full-height {
	height: 100% !important; /* overwrite all set heights */
	max-height: none !important; /* overwrite all set max-height */
}

.auto-width {
	width: auto !important;
}

.auto-height {
	height: auto !important;
}

.sticky {
    position: sticky;
    left: 0;
    right: 0;
    top: 0;
    z-index: 100;
}

.nowrap {
	white-space: nowrap;
}

h1, h2, h3, h4, h5, h6,
p, ul, ol, dl, table, fieldset, address {
	margin-bottom: var(--default-margin); /* margin-bottom for most every element */
}

strong {
	font-weight: bold;
}

em, cite, .italic  {
	font-style: italic;
}

small, small > a, small > span {
	font-size: 1.2rem;
}

blockquote, q {
	quotes: none;
}

hr {
	border-width: 0;
	border-top-width: .1rem;
	margin: calc(var(--default-margin) * 2);
	clear: both;
}

hr + * {
	margin-top: calc(var(--default-margin) * 2);
}

figure {
	margin: 0;
}

a :is(img, figcaption) {
	display: block;
	text-align: center;
	margin: 0 auto;
}

a img {
	border: var(--default-border);
}

a:is(:hover, :active, :focus) img {
	border-color: var(--primary-color);
}

.hidden {
	display: none !important
}
/* end basic selectors and classes ------------------------------------------------------------------------------------------ */

/* begin boxes ------------------------------------------------------------------------------------------ */
.box {
	background: var(--default-background-color);
	border: var(--default-border);
	border-radius: var(--border-radius);
	padding: var(--default-padding);
}

.box > div:first-child {
	margin-top: 0;
}

.box > p:last-child {
	margin-bottom: 0;
}

.box.center-content p:last-child {
	margin: 0;
}

.box.center-content > div {
	border: var(--default-border);
	margin: 0 auto;
	top: 50%;
	transform: translateY(-50%);
	display: table;
	padding: var(--default-padding);
}

.box.center-content:is(.grid-container, .flex-container) {
	align-content: center;
	justify-content: center;
}

.box.center-content.flex-container {
	align-items: center; /* required to center flex items vertical correctly */
}

.box.center-content:is(.grid-container, .flex-container) > div {
	top: auto;
	transform: none;
	flex: none; /* make item as wide as its content */
}

/* begin box effects */
.border-radius {
	border-radius: var(--border-radius); /* border-radius to create round corners for any element with this class  */
}

.box-shadow {
	box-shadow: var(--box-shadow); /* box-shadow (color, left/right, top/bottom, blur) for any element with this class */
}

.border {
	border: var(--default-border); /* border (width, style, color) for any element with this class */
}
/* end box effects */
/* end boxes ------------------------------------------------------------------------------------------ */

/* begin buttons ------------------------------------------------------------------------------------------ */
button, .button, input[type="submit"] {
	background: var(--pure-black);
	border: var(--default-border);
	border-color: var(--pure-black);
	border-radius: var(--border-radius);
    color: var(--pure-white);
	display: inline-flex;
	align-items: center;
	justify-content: center;
	font-weight: bold;
	margin: 0;
    padding: var(--default-padding);
	text-align: center;
	text-decoration: none;
	line-height: 100%;
	min-width: 4rem;
	min-height: 4rem;
}

button, .button,
:is(button, .button) > span,
:is(button, .button) > span[class*="icon-"] {
	align-self: center; /* necessary to keep text and icon centered if button has different alignment. */
}

:is(button, .button, input[type="submit"]).primary {
	background: var(--primary-color);
	border-color: var(--primary-color);
}

:is(button, .button, input[type="submit"]).center {
	display: table;
	float: none;
	margin: 0 auto;
}

:is(button, .button, input[type="submit"]):last-child {
	margin: 0;
}

:is(button, .button, input[type="submit"]):is(:hover, :active, :focus) {
	color: var(--pure-black);
	background: var(--pure-white);
	cursor: pointer;
	border-color: var(--pure-black);
	text-shadow: none;
}

:is(button, .button, input[type="submit"]).primary:is(:hover, :active, :focus) {
	color: var(--primary-color);
	border-color: var(--primary-color);
}

:is(button, .button):is(:hover, :active, :focus) > span,
:is(button, .button):is(:hover, :active, :focus) > span[class*="icon-"] {
	color: var(--pure-black);
	text-shadow: none;
}

:is(button, .button).primary:is(:hover, :active, :focus) > span,
:is(button, .button).primary:is(:hover, :active, :focus) > span[class*="icon-"] {
	color: var(--primary-color);
	border-color: var(--primary-color);
}
/* end buttons ------------------------------------------------------------------------------------------ */

/* begin clearfix ------------------------------------------------------------------------------------------ */
/* clearfix is for clearing the boxes in ie and ff correctly (= the height of the outer container will be displayed correctly) */
.clearfix:after {
	content: ".";
	visibility: hidden;
	display: block;
	clear: both;
	height: 0;
}

.clearfix {
	display: block;
}

.clear, .clear-both {
	visibility: hidden;
	clear: both;
	height: 0;
	line-height: 0;
}
/* end clearfix ------------------------------------------------------------------------------------------ */

/* begin disabled ------------------------------------------------------------------------------------------ */
[readonly],
.disabled,
.disabled :is(span, input, select, textarea),
[disabled],
[disabled] span,
input[type="submit"]:disabled {
	background: var(--disabled-background-color) !important;
	color: var(--disabled-color) !important;
	border-color: var(--disabled-color) !important;
	text-shadow: inherit;
}

:is(input[type="checkbox"], input[type="radio"]):disabled + span,
.toggle-switch.switch-label input:disabled ~ .label {
	color: var(--disabled-color) !important;
}

:is([readonly], .disabled, [disabled]):is(:hover, :active. :focus) {
	cursor: not-allowed !important;
}

:is(label, .label).disabled,
:is(.disabled, [disabled]) span {
	background: none !important;
}

:is(.disabled .replace-input-type, .toggle-switch input:checked:disabled)::after,
.toggle-switch.switch-label input:checked:disabled ~ .label::before {
	background: var(--disabled-color) !important;
	border-color: var(--disabled-color) !important;
}

.toggle-switch.switch-label.disabled {
	background: var(--disabled-background-color) !important;
}

.toggle-switch.switch-label input:disabled ~ .label {
	color: var(--disabled-color) !important;
}

.toggle-switch.disabled .label::before {
	border-color: var(--disabled-color) !important;
}
/* end disabled ------------------------------------------------------------------------------------------ */

/* begin flex-containers ------------------------------------------------------------------------------------------ */
.flex-container, .button-wrapper {
	display: flex;
	flex-wrap: wrap; /* breaks children to new line if they are wider than their parent */
	gap: var(--default-gap);
}

:is(.flex-container, .button-wrapper ) > * {
	float: none !important; /* flex-items should not be floated */
}

.flex-container > *:not(.button) {
	flex: 1; /* item should have same width */
}

.flex-container.stretch > * {
	align-self: stretch; /* stretch items to same height (elements must/should not have a set height) */
}

fieldset > .flex-container > * {
	align-self: flex-end;
}

.flex-container.vertical {
	flex-direction: column;
}

.flex-container.vertical > * {
	flex: none;
	margin-top: 0;
	margin-bottom: 0;
}

:is(label, .label) > .flex-container > :is(label, .label) {
	display: flex;
	align-items: center;
}

.no-gap {
	gap: 0;
}

.no-wrap {
	flex-wrap: nowrap;
}

.no-flex, .no-flex > * {
	flex: none  !important; /* don't stretch items (item(s) should have default width) */
}

[data-type="multistep"] .button-wrapper {
	flex-direction: row;
}

[data-type="multistep"] .button-wrapper > [name="prev"] {
	margin-left: 0;
}

[data-type="multistep"] .button-wrapper > [name="next"] {
	margin-left: auto;
}

.button-wrapper, .button-wrapper.align-right {
	flex-direction: row-reverse;
}

.button-wrapper.align-left {
	flex-direction: row;
}

.button-wrapper.align-center {
	flex-direction: row;
	justify-content: center;
}

.button-wrapper.space-between {
	flex-direction: row;
	justify-content: space-between;
}

.button-wrapper > small {
	position: absolute;
	left: 0;
}

:is(ul, ol).flex-list {
	display: flex;
	padding: var(--default-padding);
	border: var(--default-border);
	background: var(--pure-white);
}

:is(ul, ol).flex-list > li {
	list-style-type: none;
	margin: 0;
	flex: 1;
}

.word-break-keep-all {
	word-break: keep-all;
}
/* end flex-containers ------------------------------------------------------------------------------------------ */

/* begin forms: basic elements ------------------------------------------------------------------------------------------ */
form [class*="grid-container"] {
	grid-auto-rows: min-content;
	grid-template-rows: min-content;
}

/* begin fieldsets */
fieldset {
	background: var(--default-background-color);
	border: var(--default-border);
	border-radius: var(--border-radius);
	padding: calc(var(--default-padding) * 2);
}

fieldset.flex-container {
	display: flex;
	gap: var(--default-gap);
	flex-direction: column;
}

fieldset.grid-container-create-columns {
	grid-template-columns: min-content; /* items should be minimum as wide as content */
}

fieldset.grid-container-create-columns > *,
fieldset.grid-container-create-columns .grid-container-create-columns {
	grid-column: span var(--grid-columns);
}

fieldset fieldset {
	margin-bottom: 0;
}

fieldset legend {
	font-weight: bold;/* font-weight of legends */
	padding: 0 .3rem .3rem .3rem; /* padding of legends */
}
/* end fieldsets */

/* begin labels */
label, .label {
	display: block;
}

:is(label, .label) :is(button, .button) button {
	align-self: stretch;
}

:is(label, .label).inline {
	display: flex;
}

:is(label, .label).inline:not(.textarea) > * {
	align-self: center;
	white-space: nowrap;
}

:is(label, .label) > span {
	line-height: 100%;
	white-space: normal;
}

:is(label, .label).inline > span  {
	grid-column: span var(--grid-small-span);
	white-space: normal;
	margin: 0 var(--default-margin) 0 0;
}

:is(label, .label).inline > span + * {
	grid-column: span var(--grid-large-span);
}

:is(label, .label) > span > sup {
	font-size: inherit; /* overwrite normalize.css */
	top: .5rem; /* overwrite normalize.css */
	color: var(--primary-color);
}

:is(label, .label):focus input + span {
	color: var(--primary-color);
}

.grid-container-create-columns > :is(label, .label) {
	grid-column: 1 / span var(--grid-columns);
}

:is(label, .label).inline > span > sup {
	top: -.5rem;
}

:is(label, .label):not(.inline) > span:first-child:not(.hidden) {
	display: flex;
	margin-bottom: calc(var(--default-margin) / 2);
}

label > :is(input, select, textarea):not(:first-child) {
	display: block;
	width: 100%;
}

label > :is(input[type="checkbox"], input[type="radio"]) {
	display: inline-block;
	width: auto;
}

:is(label, .label).error :is(input:not([type="range"]), select, textarea, .replace-input-type),
:is(input, select, textarea).error {
	border: var(--error-border);
}

:is(label, .label).disabled span {
	color: var(--disabled-color);
}

label.error sup, label.error > span {
	color: var(--error-color);
}

:is(label, .label, fieldset).error, :is(label, .label).error span {
	border-color: var(--error-color);
	color: var(--error-color);
}

fieldset > *:first-child,
fieldset legend + * {
	margin-top: 0;
}
/* end labels */

/* begin input-elements */
input, select, textarea {
	min-width: 5rem;
	border: var(--default-border);
	border-radius: var(--border-radius);
	align-self: start; /* required to let items as high as their content */
	background: var(--pure-white);
}

:is(input, select, textarea):is(:hover, :active, :focus) {
	border-color: var(--primary-color);
}

input:checked + span {
	color: var(--primary-color);
}

input, select {
	height: var(--input-height); /* forces different browsers to render same height */
	padding: 1rem .1rem 1rem .5rem;
}

select {
	padding-top: 0; /* avoids text to be cropped */
	padding-bottom: 0; /* avoids text to be cropped */
}

select[multiple] {
	max-height: 10rem;
}

input[type="search"] {
	align-self: stretch;
	box-sizing: border-box; /* overwrite normalize.css */
}

input[type="search"] + button {
	border-top-left-radius: 0;
	border-bottom-left-radius: 0;
}

input:is([type="checkbox"], [type="radio"]):focus + span {
	color: var(--primary-color);
}

::placeholder {
	font-style: italic;
}

:is(input, textarea).error::placeholder {
	color: var(--error-color);
}

select {
	word-wrap: normal; /* break words only at allowed break points */
}

input:is([type="radio"], [type="checkbox"]) {
	margin-bottom: 0;
	min-width: auto;
	height: auto;
}

input[type="file"] {
	padding-top: .8rem;
	padding-bottom: .7rem;
}

input[type="color"] {
	padding: 0;
}

:is(label, .label) > input {
	margin-top: 0;
	margin-left: 0;
}

textarea {
	overflow-x: hidden;
	overflow-y: scroll;
	min-height: 16.5rem;
	padding: calc(var(--default-padding) / 2);
}

input[type="image"] {
	width: auto;
	height: auto;
	padding: 0;
	margin: 0 .3rem;
	border: 0;
}

input:is([type="checkbox"], [type="radio"], [type="image"]) {
	background: none;
	width: auto;
}

.inline input:is([type="date"], [type="number"], [type="color"]) {
	max-width: 14rem;
}

input[type="submit"]input:is(:hover, :active, :focus) {
	cursor: pointer;
}

:is(input, select):not([type="hidden"]) + input, :is(input:not([type="hidden"]), select) + select {
	border-left: 0;
}
/* end input-elements */

/* begin form-elements in table */
td :is(label, .label, select, textarea) {
	width: 100%;
	margin: 0;
}

td :is(label, .label) {
	width: auto;
	padding: 0;
}
/* end form-elements in table */

/* begin .input-wrapper */
.input-wrapper {
	display: flex;
	gap: 0;
	align-items: flex-end;
	flex-wrap: nowrap;
}

.input-wrapper > * {
	flex: auto;
}
/* end .input-wrapper */
/* end forms: basic elements ------------------------------------------------------------------------------------------ */

/* begin forms: replace-input-type (radio/checkbox) ------------------------------------------------------------------------------------------ */
label input.replace-input-type { /* label required for specificity */
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
	width: 1.28rem;
	height: 1.28rem;
	padding: .1rem;
	border: var(--default-border);
	border-color: var(--text-color);
	border-radius: var(--full-circle);
	background: var(--pure-white);
	box-shadow: none;
	display: flex;
}

input.replace-input-type.error,
input.replace-input-type.error:checked {
	border-color: var(--error-color);
}

input.replace-input-type.error:checked::after {
	background: var(--error-color);
}

input.replace-input-type:checked {
	border-color: var(--primary-color);
}

input.replace-input-type:checked::after {
	content: "";
	border-radius: var(--full-circle);
	background: var(--primary-color);
	width: 0.8rem;
	height: 0.8rem;
	align-self: center;
	margin: 0 auto;
	display: block;
}

input.replace-input-type:disabled:checked::after {
	background: var(--disabled-color);
}

input[type="checkbox"].replace-input-type {
	border-radius: 0;
}

/* the check */
input[type="checkbox"].replace-input-type:checked::after {
	content: "";
	width: 0.9rem;
	height: 0.5rem;
	border-radius: 0;
	border: .2rem solid var(--primary-color);
	border-top: 0;
	border-right: 0;
	background: none;
	transform: rotate(-45deg) skewX(-10deg);
	position: absolute;
	bottom: 0.45rem;
}

input[type="checkbox"][disabled].replace-input-type:checked::after {
	border-color: var(--disabled-color);
}

input[type="checkbox"].error.replace-input-type:checked::after {
	border-color: var(--error-color);
}

input.replace-input-type:checked + .label {
	color: var(--primary-color);
}

input.replace-input-type.error:checked + .label {
	color: var(--error-color);
}

input[disabled].replace-input-type:checked + .label {
	color: var(--disabled-color);
}

input.replace-input-type-checkbox.error:not(:checked) {
	border-color: var(--error-color);
}
/* end forms: replace-input-type (radio/checkbox) ------------------------------------------------------------------------------------------ */

/* begin forms: progressbar ------------------------------------------------------------------------------------------ */
progress {
	-webkit-appearance: progress-bar;
	-webkit-writing-mode: horizontal-tb;
}

progress[value] {
	/* Reset the default appearance */
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
	width: 25rem;
	border-radius: var(--border-radius);
	border: var(--primary-border);
	background: var(--pure-white); /* background-color for entire bar - does not work on -webkit-browsers */
	box-shadow: none;
}

/* required for webkit (only way to style progress-bar/overwrite default behavior) */
progress[value]::-webkit-progress-bar {
	background: var(--pure-white); /* background-color for entire bar in webkit */
}

progress[value]::-webkit-progress-value {
	background-image: -webkit-repeating-linear-gradient(-45deg, var(--primary-color) , var(--primary-color)  .7rem, var(--primary-color) .7rem, var(--primary-color) 1.4rem);
}

progress[value]::-moz-progress-bar {
	background-image: repeating-linear-gradient(-45deg, var(--primary-color) , var(--primary-color)  .7rem, var(--primary-color) .7rem, var(--primary-color) 1.4rem);
}
/* end forms: progressbar ------------------------------------------------------------------------------------------ */

/* begin forms: range-slider ------------------------------------------------------------------------------------------ */
input[type="range"] {
    -webkit-appearance: none;
	background: unset;
	border: 0;
}

input[type="range"]:focus {
    outline: none;
}

input[type="range"]::-webkit-slider-runnable-track {
    height: .4rem;
    border: none;
    border-radius: .2rem;
}

input[type="range"]::-moz-range-track {
    height: .4rem;
    border: none;
    border-radius: .2rem;
}

/* the thumb */
input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    border: none;
    height: 1.6rem;
    width: 1.6rem;
    border-radius: 50%;
    margin-top: -.7rem;
	background: var(--pure-white);
	border: var(--primary-border);
}

input[type="range"]::-moz-range-thumb {
    border: none;
    height: 1.6rem;
    width: 1.6rem;
    border-radius: 50%;
    margin-top: -.5rem;
	background: var(--pure-white);
	border: var(--primary-border);
}

/* the track */
input[type="range"]::-webkit-slider-runnable-track {
	background: var(--pure-white);
	border: var(--primary-border);
}

input[type="range"]::-moz-range-track {
	background: var(--pure-white);
	border: var(--primary-border);
}

/* focus the track */
/* do not set :focus for IE - styles are controlled by -ms-fill-lower/-ms-fill-upper */
input[type="range"]:focus::-webkit-slider-runnable-track {
    background: var(--primary-color);
}

input[type="range"]:focus::-moz-range-track {
    background: var(--primary-color);
}

/* disabled styles */
input[type="range"]:is([disabled], .disabled),
input[type="range"]:is([disabled], .disabled):is(:hover, :active, :focus) {
	background: none !important;
}

input[type="range"]:is([disabled], .disabled)::-moz-range-thumb {
	background: var(--disabled-background-color);
	border-color: var(--disabled-color);
}

input[type="range"]:is([disabled], .disabled)::-webkit-slider-thumb {
	background: var(--disabled-background-color);
	border-color: var(--disabled-color);
}

input[type="range"]:is([disabled], .disabled)::-moz-range-track {
	background: var(--disabled-background-color);
	border-color: var(--disabled-color);
}

input[type="range"]:is([disabled], .disabled)::-webkit-slider-runnable-track {
	background: var(--disabled-background-color);
	border-color: var(--disabled-color);
}
/* end forms: range-slider ------------------------------------------------------------------------------------------ */

/* begin toggle-switch-checkbox and -radio ------------------------------------------------------------------------------------------ */
.toggle-switch {
	flex: none;
}

.toggle-switch input:is([type="checkbox"], [type="radio"]) { /* type required for specificity */
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
	width: 4rem;
	height: 2rem;
	border-radius: 1rem;
	padding: .2rem;
	border: var(--default-border);
	background: var(--pure-white);
	box-shadow: none;
	display: flex;
	transition: var(--default-transition);
}

.toggle-switch input::after {
	content: "";
	border-radius: var(--full-circle);
	border: var(--default-border);
	border-color: var(--text-color);
	background: var(--pure-white);
	width: 1.4rem;
	height: 1.4rem;
	display: block;
	justify-self: flex-end;
	margin-right: auto;
}

.toggle-switch input:checked {
	border-color: var(--primary-color);
}

.toggle-switch input:checked::after {
	border-color: var(--primary-color);
	background: var(--primary-color);
	margin-right: 0;
	margin-left: auto
}

.toggle-switch .label {
	align-self: center;
	margin-top: 0;
}

.toggle-switch input:is(:focus, :checked) ~ .label {
	color: var(--primary-color)
}

.toggle-switch.error .label {
	color: var(--error-color);
}

.toggle-switch.error input:not(:checked) {
	border-color: var(--error-color);
}

.toggle-switch.error input:not(:checked)::after {
	border-color: var(--error-color);
	background: var(--error-color);
}
/* end toggle-switch-checkbox and -radio ------------------------------------------------------------------------------------------ */

/* begin toggle switches with switch-label ------------------------------------------------------------------------------------------ */
.toggle-switch.switch-label {
	border: var(--default-border);
	background: var(--pure-white);
	border-radius: 1.2rem;
	overflow: hidden;
	height: 2.4rem;
	padding: .2rem var(--default-padding);
	align-self: flex-start;
	margin-top: calc(var(--default-margin) / 2);
}

.toggle-switch.switch-label {
	margin-top: 0
}

.toggle-switch.switch-label input {
	border: 0;
	background: none;
	display: none;
}

.toggle-switch.switch-label input ~ .label {
	white-space: nowrap;
	transition: left .3s linear;
	left: 0;
	line-height: 130%;
}

.toggle-switch.switch-label input + .label {
	padding-right: var(--default-padding);
	display: block;
}

.toggle-switch.switch-label input:not(:checked) + .label:not(:only-child) {
	position: absolute;
	left: 100%;
}

.toggle-switch.switch-label input + .label + .label {
	padding-left: var(--default-padding);
	text-align: right;
}

.toggle-switch.switch-label input:checked + .label + .label {
	left: -100%;
	position: absolute;
}

.toggle-switch.switch-label input ~ .label::before {
	content: "";
	border-radius: var(--full-circle);
	border: var(--primary-border);
	background: var(--primary-color);
	width: 1.4rem;
	height: 1.4rem;
	display: block;
	justify-self: flex-start;
	position: absolute;
	transition: var(--default-transition);
	right: -.7rem;
	top: .2rem;
}

.toggle-switch.switch-label input + .label  + .label::before {
	border-color: var(--text-color);
	background: var(--pure-white);
	left: -.7rem;
	top: .2rem;
}
/* end toggle switches with switch-label ------------------------------------------------------------------------------------------ */

/* begin multiple-switch  ------------------------------------------------------------------------------------------ */
.multiple-switch input {
	display: none !important;
}

.multiple-switch label {
	padding: var(--default-padding);
	margin: 0;
	background: var(--pure-white);
	border: var(--default-border);
	border-left: 0;
	flex-direction: column;
}

.multiple-switch label.disabled {
	background: var(--disabled-background-color) !important;
}

.multiple-switch label:first-child {
	border-left: var(--default-border);
	border-top-left-radius: var(--border-radius);
	border-bottom-left-radius: var(--border-radius);
}

.multiple-switch label:last-child {
	border-top-right-radius: var(--border-radius);
	border-bottom-right-radius: var(--border-radius);
}

.multiple-switch label:is(:hover, :active, :focus) {
	cursor: pointer;
}

.multiple-switch label:is(:hover, :active, :focus) input ~ span,
.multiple-switch label input:checked ~ span {
	color: var(--primary-color);
}

.multiple-switch label span {
	display: block;
	text-align: center;
	width: 100%;
	margin: 0;
}

.multiple-switch label [class*="icon"] {
	font-size: 3rem;
	margin-bottom: calc(var(--default-margin) / 2);
}

.multiple-switch label.active {
	background: var(--primary-color);
}

.multiple-switch label.active input:checked ~ span {
	color: var(--pure-white);
}

.multiple-switch label.disabled {
	background: var(--disabled-background-color);
}
/* end multiple-switch ------------------------------------------------------------------------------------------ */

/* begin place-inside (place icon inside/over inputfield) ------------------------------------------------------------------------------------------ */
.place-inside[class*="icon-"] {
	position: absolute;
	top: auto;
	bottom: 1rem;
	left: .5rem;
	z-index: 10;
	color: var(--text-color);
}

.place-inside.focus[class*="icon-"] {
	color: var(--primary-color);
}

.place-inside.error[class*="icon-"] {
	color: var(--error-color);
}

.place-inside[class*="icon-"] + input {
	padding-left: calc(var(--default-padding) * 3);
}

.place-inside[class*="icon-"] + input:focus {
	border-color: var(--primary-color);
}
/* end place-inside (place icon inside/over inputfield) ------------------------------------------------------------------------------------------ */

/* begin grid-containers ------------------------------------------------------------------------------------------ */
[class*="grid-container"] {
	display: grid;
	grid-gap: var(--grid-gap);
}

[class*="grid-container"] > [class*="grid-item"] {
	grid-column: span var(--grid-small-span);
}

[class*="grid-container"].stretch-items {
	grid-auto-rows: auto;
}

.grid-container-create-columns {
	grid-template-columns: repeat(var(--grid-columns), minmax(0, 1fr)); /* creates grid-container with predefined number of columns */
}

.grid-container-auto-columns {
	grid-template-columns: repeat(auto-fit, minmax(0, 1fr));
}

.grid-container-create-columns > .grid-item-full-width {
	grid-column: span var(--grid-columns);
}

.grid-container-create-columns > .grid-item-half-width {
	grid-column: span 6;
}

.grid-container-create-columns > .grid-small-item {
	grid-column: span var(--grid-small-span);
}

.grid-container-create-columns > .grid-large-item {
	grid-column: span var(--grid-large-span);
}
/* end grid-containers ------------------------------------------------------------------------------------------ */

/* begin headlines ------------------------------------------------------------------------------------------ */
h1, h2, h3, h4, h5, h6 {
	font-weight: var(--headline-font-weight);
	margin-top: calc(var(--default-margin) * 2);
	color: var(--primary-color);
}

h1, h1 + h2, h2 + h3, h3 + h4, h4 + h5, h5 + h6,
:is(h2, h3, h4, h5, h6):first-child {
	margin-top: 0;
}

[class*="grid-container"] > :is(h1, h2, h3, h4, h5, h6) {
	margin-bottom: 0;
}

fieldset > * {
	grid-column: 1 / span var(--grid-columns);
	margin-bottom: 0;
}

fieldset hr {
	margin: var(--default-margin);
}

fieldset hr + * {
	margin-top: 0;
}

h1, h2, h3, h4, h5, h6,
:is(h1, h2, h3, h4, h5, h6) > a {
	line-height: 130%;
}

h1, h1 > a, h1 > span, h1 > span[class*="icon-"] {
	font-size: 2.8rem; /* font-size for h1 */
}

h2, h2 > a, h2 > span, h2 > span[class*="icon-"] {
	font-size: 2.4rem; /* font-size for h2 */
}

h3, h3 > a, h3 > span, h3 > span[class*="icon-"] {
	font-size: 2.2rem; /* font-size for h3 */
}

h4, h4 > a, h4 > span, h4 > span[class*="icon-"] {
	font-size: 2rem; /* font-size for h4 */
}

h5, h5 > a, h5 > span, h5 > span[class*="icon-"] {
	font-size: 1.8rem; /* font-size for h5 */
}

h6, h6 > a, h6 > span, h6 > span[class*="icon-"] {
	font-size: 1.6rem; /* font-size for h6 */
}
/* end headlines ------------------------------------------------------------------------------------------ */

/* begin hyperlinks ------------------------------------------------------------------------------------------ */
a {
	color: var(--hyperlink-color);
}

a:is(:hover, :active, :focus),
a:is(:hover, :active, :focus) > * {
	color: var(--hyperlink-color-highlighted);
}

a[class*="icon-"]:not(.button) {
	color: var(--text-color);
}

a[class*="icon-"]:not(.button):is(:hover, :active, :focus, .active),
.highlighted {
	color: var(--primary-color);
}
/* end hyperlinks ------------------------------------------------------------------------------------------ */

/* begin icons ------------------------------------------------------------------------------------------ */
[class*="icon-"] {
    font-size: 1.8rem;
	text-decoration: none !important;
	display: inline-block;
}

[class*="icon-"] > * {
	font-family: var(--font-family);
	font-size: var(--font-size);
}

[class*="icon-"].button, button[class*="icon-"] {
	line-height: 100%;
}

a.link-icon {
	text-decoration: none !important; /* for links, that contain icons */
}

a.link-icon.disabled span {
	color: var(--text-color);
	opacity: var(--reduced-opacity);
	text-decoration: none !important; /* for links, that contain icons */
}

a.link-icon.disabled:is(:hover, :active, :focus) span {
	cursor: not-allowed;
}

a.link-icon.disabled [class*="icon-"] + span {
	font-style: italic;
}

[class*="icon-"] + span,
span + [class*="icon-"] {
	margin-left: calc(var(--default-margin) / 2);
}

:is(h1, h2, h3, h4, h5, h6) [class*="icon-"] + span {
	margin-left: var(--default-margin);
}
/* end icons ------------------------------------------------------------------------------------------ */

/* begin lists ------------------------------------------------------------------------------------------ */
:is(ul, ol) :is(ul, ol) {
	margin: 0 0 0 var(--default-margin);
}

/* text-indent for second-line */
:is(ul, ol) li {
	list-style-type: disc;
	list-style-position: outside;
	margin-left: 1.7rem;
}

ol li {
	list-style-type: decimal;
}

dl {
	display: grid;
    grid-gap: .2rem 1rem; /* row, column */
	grid-auto-rows: min-content;
	grid-template-columns: min-content max-content;
}

dt {
	white-space: nowrap;
}

dd {
	grid-column: 2;
}

dl.wrap {
	grid-template-columns: min-content auto;
}

dl.wrap dd {
	white-space: normal;
	word-break: break-all; /* break long strings */
}
/* end lists ------------------------------------------------------------------------------------------ */

/* begin navigation ------------------------------------------------------------------------------------------ */
.main-navigation-wrapper {
	background: var(--default-background-color);
	border-top: var(--default-border);
	border-bottom: var(--default-border);
}

nav {
	width: 100%;
	padding-left: var(--default-padding);
	padding-right: var(--default-padding);
}

:is(nav, .nav) ul {
	margin: 0;
	display: flex;
	border-left: var(--default-border);
	border-right: var(--default-border);
	background: var(--default-background-color);
}

:is(nav, .nav) > ul > li {
	border-right: var(--default-border);
}

:is(nav, .nav) ul.stretch-items > li {
	flex: 1
}

:is(nav, .nav) ul li {
	list-style-type: none;
	margin: 0;
	white-space: nowrap;
}

:is(nav, .nav) ul li a {
	display: block;
	padding: var(--default-padding);
	text-decoration: none;
	color: var(--text-color);
}

:is(nav, .nav) ul li a:is(:hover, :active, :focus),
:is(nav, .nav) ul li.active a {
	background: var(--primary-color);
	color: var(--pure-white);
}

:is(nav, .nav) ul li a:is(:hover, :active, :focus) span,
:is(nav, .nav) ul li.active a span {
	background: none;
	color: var(--pure-white);
}

nav ul li a span[class*='icon-'] {
	font-size: 1rem;
}

:is(nav, .nav) ul ul {
	display: none;
	position: absolute; /* brings sub-navigation to own layer */
	left: 0; 			/* left-position of layer (as left as top-level-entries) */
	z-index: 100; 		/* brings sub-navigation to front */
	min-width: 100%;
	border-bottom: var(--default-border);
}

:is(nav, .nav) ul ul li {
	border-top: var(--default-border);
}

:is(nav, .nav) ul ul li:last-child {
	border-bottom: 0;
	border-bottom-left-radius: var(--border-radius);
	border-bottom-right-radius: var(--border-radius);
}

:is(nav, .nav) ul ul ul {
	top: 0;
	left: 100%;
}

:is(nav, .nav) li:is(:hover, :active, :focus) > ul
:is(nav, .nav) li.active > ul {
	display: block;
}
/* end navigation ------------------------------------------------------------------------------------------ */

/* begin system messages ------------------------------------------------------------------------------------------ */
.system-message {
	border-radius: var(--border-radius);
	display: table;
	font-weight: bold;
	padding: var(--default-padding);
	text-align: center;
	margin-bottom: var(--default-margin);
	border: var(--default-border);
	border-width: .2rem;
	background: var(--system-message-background-color);
	-webkit-background-clip: padding-box; /* important to keep border transparent */
	background-clip: padding-box; /* important to keep border transparent */
}

.system-message > h4 {
	display: flex;
	align-items: center;
	justify-content: center;
	margin: 0;
}

.system-message > * {
	color: var(--system-message-text-color);
}

.system-message.error {
	--system-message-background-color: rgba(var(--error-color-rgb-values));
	border-color: rgba(var(--error-color-rgb-values), var(--reduced-opacity));
}

.system-message.warning {
	--system-message-background-color: rgb(var(--warning-color-rgb-values));
	border-color: rgba(var(--warning-color-rgb-values), var(--reduced-opacity));
}

.system-message.success {
	--system-message-background-color: rgb(var(--success-color-rgb-values));
	border-color: rgba(var(--success-color-rgb-values), var(--reduced-opacity));
}

.system-message.info {
	--system-message-background-color: rgb(var(--info-color-rgb-values));
	border-color: rgba(var(--info-color-rgb-values), var(--reduced-opacity));
}

.grid-container-create-columns .system-message {
	grid-column: span var(--grid-columns);
}
/* end system messages ------------------------------------------------------------------------------------------ */

/* begin tables ------------------------------------------------------------------------------------------ */
.table-wrapper {
	overflow-x: auto;
}

.table-wrapper table {
	margin-bottom: 0;
}

table {
	border: var(--primary-border);
	border-radius: var(--border-radius);
}

table.full-width {
	display: table; /* tables must have display: table; */
}

[class*="grid-container"] table {
	align-self: start;
}

tr {
	background: var(--default-background-color-reduced-opacity);
}

tr:nth-child(even) {
	background: var(--default-background-color);
}

th, td {
	padding: var(--default-padding);
	border: var(--default-border);
	border-top: 0;
	border-left: 0;
}

th {
	background: var(--primary-color);
	border-right: var(--default-border);
	border-right-color: var(--pure-white);
	color: var(--pure-white);
    font-size: 1.5rem;
    font-weight: bold;
	white-space: nowrap;
}

thead, th:first-child, th:last-child {
    border-radius: var(--border-radius);
	border-bottom-left-radius: 0;
	border-bottom-right-radius: 0;
}

th:first-child {
	border-top-right-radius: 0;
}

:is(th, td):last-child {
	border-right: 0;
}

th:last-child {
	border-top-left-radius: 0;
}

td {
	vertical-align: middle;
}

tr:is(:hover, :active, :focus) td {
	background: var(--pure-white);
}

td[colspan] {
	text-align: center;
}

tr:last-of-type td {
	border-bottom: 0;
}

tr:last-of-type td:first-child {
	border-bottom-left-radius: var(--border-radius);
}

tr:last-of-type td:last-child {
	border-bottom-right-radius: var(--border-radius);
}

/* begin highlighted table rows/cells */
th.highlighted {
	color: var(--pure-white);
}

:is(tr, td).highlighted {
	background: var(--primary-color-reduced-opacity);
	color: var(--pure-white);
}

tr.highlighted:is(:hover, :active, :focus) td,
td.highlighted:is(:hover, :active, :focus),
tr:is(:hover, :active, :focus) td.highlighted {
	background: var(--primary-color);
}
/* end highlighted table rows/cells */

table a {
	display: block;
}

:is(table, td).center-content td {
	text-align: center;
}

td.center-content :is(button, .button) {
	float: none;
	display: table;
	margin: 0 auto;
}

table.centercontent td input {
	float: none;
	text-align: center;
}

thead.word-wrap-normal th {
	word-wrap: normal; /* break words only at allowed break points */
}

td form {
	margin-bottom: 0; /* margin-bottoms of forms in table-cells */
}
/* end tables ------------------------------------------------------------------------------------------ */

/* begin transforms ------------------------------------------------------------------------------------------ */
.rotate-90deg {
	-webkit-transform: rotate(90deg);
	transform: rotate(90deg);
}

.rotate-180deg {
	-webkit-transform: rotate(180deg);
	transform: rotate(180deg);
}

.rotate-270deg {
	-webkit-transform: rotate(270deg);
	transform: rotate(270deg);
}

.mirror-x, .flip-x {
	-webkit-transform: scaleX(-1);
	transform: scaleX(-1);
}

.mirror-y, .flip-y {
	-webkit-transform: scaleY(-1);
	transform: scaleY(-1);
}
/* end transforms ------------------------------------------------------------------------------------------ */
/* ---------------------------------------------- END MAIN STYLES -------------------------------------------------- */

/* ---------------------------------------------- BEGIN MEDIA QUERIES AND BROWSER SPECIFIC STYLES -------------------------------------------------- */
/* begin styles webkit-browsers only ------------------------------------------------------------------------------------------ */
@media screen and (-webkit-min-device-pixel-ratio:0) {
	:is([type="color"], [type="date"], [type="datetime-local"], [type="email"], [type="month"], [type="number"],
	[type="range"], [type="search"], [type="tel"], [type="time"], [type="url"], [type="week"]) {
		-webkit-appearance: none; /* avoid default rounded border on safari */
	}
}
/* end styles webkit-browsers only ------------------------------------------------------------------------------------------ */

/* begin styles medium for screens ------------------------------------------------------------------------------------------ */
@media only screen and (max-width: 1023px) {
	html {
		--grid-columns: 6; /* grid-columns */
		--grid-small-span: 3; /* default column span smaller part */
		--grid-large-span: 3; /* default column span larger part */
		--line-height: 150%; /* avoids hyperlinks inside text to be to narrow to each other */
	}

	.grid-container-three-fractions {
		grid-template-columns: repeat(2, 1fr);
	}

	.grid-container-four-fractions {
		grid-template-columns: repeat(2, 1fr);
	}

	.grid-container-create-columns > .grid-item-half-width {
		grid-column: span var(--grid-columns);
	}

	.hide-for-medium, .hide-for-small-up, .hide-for-large-down {
		display: none !important;
	}

	.hide-for-medium-up {
		display: block !important;
	}

	:is(label, .label).inline {
		flex-direction: column;
	}

	:is(label, .label).inline > span {
		align-self: flex-start;
	}

	:is(label, .label).inline > span:first-child {
		margin-bottom: calc(var(--default-margin) / 2);
	}

	:is(label, .label).inline:not(.textarea) > * {
		align-self: flex-start;
	}

	input.replace-input-type:is([type="checkbox"], [type="radio"]) {
		transform: scale(1.4); /* scale radiobuttons and checkbox to double of original size (to click them more easily) */
		margin: 0 var(--default-margin) 0 0;
	}
}
/* end styles medium for screens ------------------------------------------------------------------------------------------ */

/* begin styles small for screens ------------------------------------------------------------------------------------------ */
@media only screen and (max-width: 600px) {
	html {
		--grid-columns: 4; /* grid-columns */
		--grid-small-span: 4; /* default column span smaller part */
		--grid-large-span: 4; /* default column span larger part */
		font-size: 56.25%; /* default size is 16px, 56.25% of that is 9px = 0.9rem */
	}

	html, body {
		min-height: 100%;
	}

	[class*="grid-container"][class$="fractions"] {
		grid-template-columns: repeat(1, 1fr);
	}

	button, .button, input[type="submit"] {
		width: 100%;
		float: none;
		text-align: center;
	}

	.button-wrapper.no-flex > :is(button, .button) {
		width: auto;
	}

	.button-wrapper.align-right {
		flex-direction: column-reverse;
	}

	fieldset {
		padding: var(--default-padding);
	}

	.flex-container.align-bottom > *,
	fieldset > .flex-container > * {
		align-self: flex-start;
		width: 100%;
	}

	fieldset > label:first-child {
		margin-top: 0;
	}

	fieldset [class*="grid-container"] {
		--grid-gap: calc(var(--grid-gap) / 2);
	}

	:is(label, .label).inline > span {
		margin: 0 0 calc(var(--default-margin) / 2) 0;
	}

	.inline input:is([type="date"], [type="number"], [type="color"]) {
		max-width: none;
	}

	.flex-container {
		flex-direction: column; /* arrange flex-items vertically */
	}

	.input-wrapper {
		flex-direction: row; /* avoid flex-items to be arranged vertically */
	}

	.input-wrapper input[type="search"] {
		flex: 1;
	}

	.input-wrapper :is(button, .button) {
		width: auto;
	}

	.place-inside + :is(input, select, textarea) {
		align-self: auto;
	}

	[class*="grid-container"] > :is(h1, h2, h3, h4, h5, h6) {
		margin-top: var(--default-margin);
	}

	.hide-for-small, .hide-for-medium-down, .hide-for-large-down {
		display: none !important;
		float: none;
	}

	.hide-for-small-up {
		display: block !important;
	}

	hr {
		margin: var(--default-margin);
	}

	main {
		padding-left: 0;
		padding-right: 0;
	}

	.multiple-switch .flex-container {
		flex-direction: row;
	}

	.flex-container :is(input, select, textarea) {
		width: 100%;
	}

	:is(label, .label) .flex-container {
		flex-direction: row;
	}

	:is(label, .label) .flex-container :is(button, .button), .label .flex-container .button {
		width: auto;
	}
}
/* end styles for small screens ------------------------------------------------------------------------------------------ */
/* ---------------------------------------------- END MEDIA QUERIES AND BROWSER SPECIFIC STYLES -------------------------------------------------- */

/* begin styles for print only ------------------------------------------------------------------------------------------ */
@media only print {
	* {
		color: #000;
	}

	a[href]:after {
		 content: " <"attr(href)">";
		 font-style: italic;
	}

	*[cite]:after {
		content: close-quote" (Source: "attr(cite)")";
	}

	img[alt]:after {
		content:"\A ("attr(alt)")";
	}
}
/* end styles for print only ------------------------------------------------------------------------------------------ */